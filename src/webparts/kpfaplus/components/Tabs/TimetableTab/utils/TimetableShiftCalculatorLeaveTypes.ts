// src/webparts/kpfaplus/components/Tabs/TimetableTab/utils/TimetableShiftCalculatorLeaveTypes.ts
import { 
  IShiftInfo, 
  TIMETABLE_COLORS, 
  ColorPriority, 
  IDayColorAnalysis,
  IDayInfo
} from '../interfaces/TimetableInterfaces';

/**
 * –†–∞–±–æ—Ç–∞ —Å —Ç–∏–ø–∞–º–∏ –æ—Ç–ø—É—Å–∫–æ–≤, –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏ –∏ —Ü–≤–µ—Ç–æ–≤—ã–º–∏ —Å—Ö–µ–º–∞–º–∏
 * –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–ø—É—Å–∫–æ–≤, —Ä–∞–±–æ—Ç—ã —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
 * –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ —Å —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Ü–≤–µ—Ç–æ–≤
 * –ù–û–í–û–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Excel —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –±–µ–∑ —Å–º–µ–Ω
 * –í–µ—Ä—Å–∏—è 3.2 - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Excel —ç–∫—Å–ø–æ—Ä—Ç–∞
 */
export class TimetableShiftCalculatorLeaveTypes {

  // *** –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –ê–ù–ê–õ–ò–ó–ê –¶–í–ï–¢–û–í ***

  /**
   * –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç —è—á–µ–π–∫–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
   * –ù–û–í–û–ï: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ Holiday > Leave Type > Default
   */
  public static resolveCellColor(
    shifts: IShiftInfo[], 
    getLeaveTypeColor?: (typeOfLeaveId: string) => string | undefined
  ): IDayColorAnalysis {
    console.log('[TimetableShiftCalculatorLeaveTypes] Resolving cell color with priority system:', {
      shiftsCount: shifts.length,
      hasLeaveTypeColorFunction: !!getLeaveTypeColor
    });

    if (shifts.length === 0) {
      return {
        finalColor: TIMETABLE_COLORS.DEFAULT_BACKGROUND,
        appliedPriority: ColorPriority.DEFAULT,
        reasons: ['No shifts in day'],
        hasHoliday: false,
        hasLeave: false,
        holidayShiftsCount: 0,
        leaveShiftsCount: 0
      };
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–º–µ–Ω—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ –æ—Ç–ø—É—Å–∫–æ–≤
    const holidayShifts = shifts.filter(shift => shift.isHoliday || false);
    const leaveShifts = shifts.filter(shift => shift.typeOfLeaveId);
    
    const holidayShiftsCount = holidayShifts.length;
    const leaveShiftsCount = leaveShifts.length;
    const hasHoliday = holidayShiftsCount > 0;
    const hasLeave = leaveShiftsCount > 0;

    const reasons: string[] = [];
    let finalColor = TIMETABLE_COLORS.DEFAULT_BACKGROUND;
    let appliedPriority = ColorPriority.DEFAULT;

    // *** –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü–†–ê–ó–î–ù–ò–ö–ò (–ö–†–ê–°–ù–´–ô –¶–í–ï–¢) ***
    if (hasHoliday) {
      finalColor = TIMETABLE_COLORS.HOLIDAY;
      appliedPriority = ColorPriority.HOLIDAY;
      reasons.push(`üî¥ HOLIDAY priority: ${holidayShiftsCount} holiday shift(s) found`);
      
      if (hasLeave) {
        reasons.push(`‚ö†Ô∏è Note: ${leaveShiftsCount} leave shift(s) ignored due to holiday priority`);
      }
      
      console.log(`[TimetableShiftCalculatorLeaveTypes] üî¥ HOLIDAY COLOR APPLIED: ${finalColor} (${holidayShiftsCount} shifts)`);
    }
    // *** –ü–†–ò–û–†–ò–¢–ï–¢ 2: –¢–ò–ü–´ –û–¢–ü–£–°–ö–û–í (–¶–í–ï–¢–ù–´–ï) ***
    else if (hasLeave && getLeaveTypeColor) {
      const dominantLeaveColor = this.getDominantLeaveColor(shifts, getLeaveTypeColor);
      
      if (dominantLeaveColor) {
        finalColor = dominantLeaveColor;
        appliedPriority = ColorPriority.LEAVE_TYPE;
        reasons.push(`üü° LEAVE TYPE priority: Using dominant leave color ${dominantLeaveColor}`);
        
        console.log(`[TimetableShiftCalculatorLeaveTypes] üü° LEAVE COLOR APPLIED: ${finalColor} (${leaveShiftsCount} shifts)`);
      } else {
        reasons.push(`‚ö†Ô∏è Leave shifts found but no valid colors available`);
        finalColor = TIMETABLE_COLORS.DEFAULT_BACKGROUND;
        appliedPriority = ColorPriority.DEFAULT;
      }
    }
    // *** –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ (–ë–ï–õ–´–ô) ***
    else {
      finalColor = TIMETABLE_COLORS.DEFAULT_BACKGROUND;
      appliedPriority = ColorPriority.DEFAULT;
      reasons.push(`‚ö™ DEFAULT: No holidays or leave types found`);
      
      console.log(`[TimetableShiftCalculatorLeaveTypes] ‚ö™ DEFAULT COLOR APPLIED: ${finalColor}`);
    }

    const analysis: IDayColorAnalysis = {
      finalColor,
      appliedPriority,
      reasons,
      hasHoliday,
      hasLeave,
      holidayShiftsCount,
      leaveShiftsCount
    };

    console.log('[TimetableShiftCalculatorLeaveTypes] Color resolution completed:', analysis);
    return analysis;
  }

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–≤–µ—Ç –æ—Ç–ø—É—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤)
   */
  public static getDominantLeaveColor(
    shifts: IShiftInfo[], 
    getLeaveTypeColor?: (typeOfLeaveId: string) => string | undefined
  ): string | undefined {
    if (shifts.length === 0) {
      return undefined;
    }

    // *** –í–ê–ñ–ù–û: –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, –æ—Ç–ø—É—Å–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è ***
    const hasHolidays = shifts.some(shift => shift.isHoliday || false);
    if (hasHolidays) {
      console.log('[TimetableShiftCalculatorLeaveTypes] üî¥ Holidays detected - ignoring leave colors due to priority system');
      return undefined;
    }

    // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–ø—É—Å–∫–∞
    const leaveColorCounts = new Map<string, number>();
    
    shifts.forEach(shift => {
      if (shift.typeOfLeaveId && getLeaveTypeColor) {
        const leaveColor = getLeaveTypeColor(shift.typeOfLeaveId);
        if (leaveColor) {
          const existing = leaveColorCounts.get(leaveColor);
          leaveColorCounts.set(leaveColor, (existing || 0) + 1);
        }
      }
    });

    if (leaveColorCounts.size === 0) {
      return undefined;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–≤–µ—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–º–µ–Ω
    let dominantColor: string | undefined = undefined;
    let maxCount = 0;

    leaveColorCounts.forEach((count, color) => {
      if (count > maxCount) {
        maxCount = count;
        dominantColor = color;
      }
    });

    console.log(`[TimetableShiftCalculatorLeaveTypes] Dominant leave color: ${dominantColor} (${maxCount} shifts)`);
    return dominantColor;
  }

  /**
   * –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ getDominantLeaveColor –±–µ–∑ getLeaveTypeColor
   */
  public static getDominantLeaveColorLegacy(shifts: IShiftInfo[]): string | undefined {
    if (shifts.length === 0) {
      return undefined;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
    const hasHolidays = shifts.some(shift => shift.isHoliday || false);
    if (hasHolidays) {
      return undefined; // –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    }

    // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞ –æ—Ç–ø—É—Å–∫–∞ –∏–∑ —Å–∞–º–∏—Ö —Å–º–µ–Ω
    const leaveColorCounts = new Map<string, number>();
    
    shifts.forEach(shift => {
      if (shift.typeOfLeaveColor) {
        const existing = leaveColorCounts.get(shift.typeOfLeaveColor);
        leaveColorCounts.set(shift.typeOfLeaveColor, (existing || 0) + 1);
      }
    });

    if (leaveColorCounts.size === 0) {
      return undefined;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–≤–µ—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–º–µ–Ω
    let dominantColor: string | undefined = undefined;
    let maxCount = 0;

    leaveColorCounts.forEach((count, color) => {
      if (count > maxCount) {
        maxCount = count;
        dominantColor = color;
      }
    });

    return dominantColor;
  }

  // *** –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –û–¢–ü–£–°–ö–û–í –ò –ü–†–ê–ó–î–ù–ò–ö–û–í ***

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤ –∏–∑ —Å–º–µ–Ω (—Å —É—á–µ—Ç–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤)
   */
  public static getUniqueLeaveTypes(shifts: IShiftInfo[]): Array<{
    id: string;
    title: string;
    color: string;
    count: number;
    isOverriddenByHoliday: boolean; // –ù–û–í–û–ï: –£–∫–∞–∑—ã–≤–∞–µ—Ç, –ø–µ—Ä–µ–∫—Ä—ã—Ç –ª–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º
  }> {
    const leaveTypesMap = new Map<string, {
      id: string;
      title: string;
      color: string;
      count: number;
      isOverriddenByHoliday: boolean;
    }>();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
    const hasHolidays = shifts.some(shift => shift.isHoliday || false);

    shifts.forEach(shift => {
      if (shift.typeOfLeaveId && shift.typeOfLeaveColor) {
        const existing = leaveTypesMap.get(shift.typeOfLeaveId);
        
        const isOverriddenByHoliday = hasHolidays && (shift.isHoliday || false); // –≠—Ç–æ—Ç —Ç–∏–ø –æ—Ç–ø—É—Å–∫–∞ –≤ —Å–º–µ–Ω–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º
        
        if (existing) {
          existing.count++;
          // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å–º–µ–Ω–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º, –æ—Ç–º–µ—á–∞–µ–º
          existing.isOverriddenByHoliday = existing.isOverriddenByHoliday || isOverriddenByHoliday;
        } else {
          leaveTypesMap.set(shift.typeOfLeaveId, {
            id: shift.typeOfLeaveId,
            title: shift.typeOfLeaveTitle || shift.typeOfLeaveId,
            color: shift.typeOfLeaveColor,
            count: 1,
            isOverriddenByHoliday: (shift.isHoliday || false)
          });
        }
      }
    });

    const result = Array.from(leaveTypesMap.values()).sort((a, b) => b.count - a.count);
    
    console.log('[TimetableShiftCalculatorLeaveTypes] Unique leave types analysis:', {
      totalTypes: result.length,
      overriddenByHoliday: result.filter(lt => lt.isOverriddenByHoliday).length,
      hasHolidays
    });

    return result;
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –≤ —Å–º–µ–Ω–∞—Ö
   */
  public static hasHolidays(shifts: IShiftInfo[]): boolean {
    return shifts.some(shift => shift.isHoliday || false);
  }

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ —Å–º–µ–Ω–∞—Ö –æ—Ç–ø—É—Å–∫–∞ (—Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤)
   */
  public static hasLeaveTypes(shifts: IShiftInfo[]): boolean {
    return shifts.some(shift => shift.typeOfLeaveId);
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö —Å–º–µ–Ω
   */
  public static getHolidayShiftsCount(shifts: IShiftInfo[]): number {
    return shifts.filter(shift => shift.isHoliday || false).length;
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º –∏ –æ—Ç–ø—É—Å–∫–∞–º
   */
  public static getHolidayAndLeaveStatistics(shifts: IShiftInfo[]): {
    totalShifts: number;
    holidayShifts: number;
    leaveShifts: number;
    normalShifts: number;
    shiftsWithBoth: number; // –°–º–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏ –æ—Ç–ø—É—Å–∫
    holidayPercentage: number;
    leavePercentage: number;
    priorityInfo: {
      holidayOverridesLeave: boolean;
      effectiveHolidayShifts: number;
      effectiveLeaveShifts: number;
    };
  } {
    const totalShifts = shifts.length;
    const holidayShifts = shifts.filter(s => s.isHoliday || false).length;
    const leaveShifts = shifts.filter(s => s.typeOfLeaveId).length;
    const shiftsWithBoth = shifts.filter(s => (s.isHoliday || false) && s.typeOfLeaveId).length;
    const normalShifts = shifts.filter(s => !(s.isHoliday || false) && !s.typeOfLeaveId).length;
    
    const holidayPercentage = totalShifts > 0 ? Math.round((holidayShifts / totalShifts) * 100) : 0;
    const leavePercentage = totalShifts > 0 ? Math.round((leaveShifts / totalShifts) * 100) : 0;
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç –æ—Ç–ø—É—Å–∫–∞
    const holidayOverridesLeave = holidayShifts > 0;
    const effectiveHolidayShifts = holidayShifts;
    const effectiveLeaveShifts = holidayOverridesLeave ? 0 : leaveShifts;

    return {
      totalShifts,
      holidayShifts,
      leaveShifts,
      normalShifts,
      shiftsWithBoth,
      holidayPercentage,
      leavePercentage,
      priorityInfo: {
        holidayOverridesLeave,
        effectiveHolidayShifts,
        effectiveLeaveShifts
      }
    };
  }

  // *** –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï ***

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∞—Ö –æ—Ç–ø—É—Å–∫–æ–≤ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –≤ –¥–Ω–µ
   */
  public static formatLeaveInfo(shifts: IShiftInfo[]): string {
    const holidayShifts = shifts.filter(s => s.isHoliday || false).length;
    const leaveTypes = this.getUniqueLeaveTypes(shifts);
    
    const info: string[] = [];
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    if (holidayShifts > 0) {
      info.push(`üî¥ Holiday (${holidayShifts})`);
    }
    
    // –ó–∞—Ç–µ–º –æ—Ç–ø—É—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏–ª–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
    if (leaveTypes.length > 0) {
      if (holidayShifts > 0) {
        info.push(`[Overridden: ${leaveTypes.map(lt => `${lt.title} (${lt.count})`).join(', ')}]`);
      } else {
        info.push(leaveTypes.map(lt => `${lt.title} (${lt.count})`).join(', '));
      }
    }
    
    return info.join(' + ');
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
   */
  public static getFirstHolidayColor(shifts: IShiftInfo[]): string | undefined {
    const holidayShift = shifts.find(shift => shift.isHoliday || false);
    return holidayShift?.holidayColor;
  }

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–ø—É—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤)
   */
  public static getFirstLeaveColor(shifts: IShiftInfo[]): string | undefined {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
    if (this.hasHolidays(shifts)) {
      return undefined; // –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    }
    
    const shiftWithLeave = shifts.find(shift => shift.typeOfLeaveColor);
    return shiftWithLeave?.typeOfLeaveColor;
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –¥–µ–Ω—å –ø—Ä–∞–∑–¥–Ω–∏–∫
   */
  public static hasSpecificHoliday(shifts: IShiftInfo[]): boolean {
    return shifts.some(shift => shift.isHoliday || false);
  }

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –¥–µ–Ω—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–ø—É—Å–∫–∞
   */
  public static hasSpecificLeaveType(shifts: IShiftInfo[], leaveTypeId: string): boolean {
    return shifts.some(shift => shift.typeOfLeaveId === leaveTypeId);
  }

  // *** –¶–í–ï–¢–û–í–´–ï –°–•–ï–ú–´ –ò –°–¢–ò–õ–ò ***

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ü–≤–µ—Ç–∞ –≤ –¥–Ω–µ —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
   */
  public static getAllColorsWithPriority(shifts: IShiftInfo[]): {
    holidayColors: string[];
    leaveColors: string[];
    finalColor: string;
    priorityReason: string;
  } {
    const holidayColors: string[] = [];
    const leaveColors: string[] = [];
    
    shifts.forEach(shift => {
      if ((shift.isHoliday || false) && shift.holidayColor) {
        if (!holidayColors.includes(shift.holidayColor)) {
          holidayColors.push(shift.holidayColor);
        }
      }
      if (shift.typeOfLeaveColor) {
        if (!leaveColors.includes(shift.typeOfLeaveColor)) {
          leaveColors.push(shift.typeOfLeaveColor);
        }
      }
    });
    
    let finalColor = TIMETABLE_COLORS.DEFAULT_BACKGROUND;
    let priorityReason = 'Default';
    
    if (holidayColors.length > 0) {
      finalColor = holidayColors[0]; // –ü–µ—Ä–≤—ã–π –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π —Ü–≤–µ—Ç
      priorityReason = `Holiday priority (${holidayColors.length} holiday colors)`;
    } else if (leaveColors.length > 0) {
      finalColor = leaveColors[0]; // –ü–µ—Ä–≤—ã–π —Ü–≤–µ—Ç –æ—Ç–ø—É—Å–∫–∞
      priorityReason = `Leave type priority (${leaveColors.length} leave colors)`;
    }
    
    return {
      holidayColors,
      leaveColors,
      finalColor,
      priorityReason
    };
  }

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ü–≤–µ—Ç–∞ –æ—Ç–ø—É—Å–∫–æ–≤ –≤ –¥–Ω–µ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  public static getAllLeaveColors(shifts: IShiftInfo[]): string[] {
    const colorsSet = new Set<string>();
    shifts.forEach(shift => {
      if (shift.typeOfLeaveColor) {
        colorsSet.add(shift.typeOfLeaveColor);
      }
    });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ES5)
    const colors: string[] = [];
    colorsSet.forEach(color => colors.push(color));
    return colors;
  }

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
   */
  public static createLeaveColorsGradient(shifts: IShiftInfo[]): string | undefined {
    const analysis = this.getAllColorsWithPriority(shifts);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —Ü–≤–µ—Ç–∞
    if (analysis.holidayColors.length > 0) {
      if (analysis.holidayColors.length === 1) {
        return analysis.holidayColors[0];
      }
      // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
      const gradientStops = analysis.holidayColors.map((color, index) => {
        const percentage = (index / (analysis.holidayColors.length - 1)) * 100;
        return `${color} ${percentage}%`;
      }).join(', ');
      return `linear-gradient(45deg, ${gradientStops})`;
    }
    
    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–∞ –æ—Ç–ø—É—Å–∫–æ–≤
    const leaveColors = analysis.leaveColors;
    if (leaveColors.length === 0) {
      return undefined;
    }
    
    if (leaveColors.length === 1) {
      return leaveColors[0];
    }
    
    // –°–æ–∑–¥–∞–µ–º CSS –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤ –æ—Ç–ø—É—Å–∫–æ–≤
    const gradientStops = leaveColors.map((color, index) => {
      const percentage = (index / (leaveColors.length - 1)) * 100;
      return `${color} ${percentage}%`;
    }).join(', ');
    
    return `linear-gradient(45deg, ${gradientStops})`;
  }

  // *** –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–ó ***

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –æ—Ç–ø—É—Å–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
   */
  public static getLeaveTypesStatistics(shifts: IShiftInfo[]): {
    totalShiftsWithLeave: number;
    uniqueLeaveTypes: number;
    leaveTypeBreakdown: Array<{
      id: string;
      title: string;
      color: string;
      count: number;
      percentage: number;
      isOverriddenByHoliday: boolean;
    }>;
    mostCommonLeaveType?: {
      id: string;
      title: string;
      color: string;
      count: number;
    };
    holidayStatistics: {
      totalHolidayShifts: number;
      holidayPercentage: number;
      overridesLeaveTypes: boolean;
    };
  } {
    const leaveTypes = this.getUniqueLeaveTypes(shifts);
    const totalShiftsWithLeave = shifts.filter(s => s.typeOfLeaveId).length;
    const totalHolidayShifts = shifts.filter(s => s.isHoliday || false).length;
    
    const leaveTypeBreakdown = leaveTypes.map(lt => ({
      ...lt,
      percentage: totalShiftsWithLeave > 0 ? Math.round((lt.count / totalShiftsWithLeave) * 100) : 0
    }));
    
    const mostCommonLeaveType = leaveTypes.length > 0 ? leaveTypes[0] : undefined;
    
    const holidayPercentage = shifts.length > 0 ? Math.round((totalHolidayShifts / shifts.length) * 100) : 0;
    
    return {
      totalShiftsWithLeave,
      uniqueLeaveTypes: leaveTypes.length,
      leaveTypeBreakdown,
      mostCommonLeaveType,
      holidayStatistics: {
        totalHolidayShifts,
        holidayPercentage,
        overridesLeaveTypes: totalHolidayShifts > 0
      }
    };
  }

  // *** –°–¢–ò–õ–ò –î–õ–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ***

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
   */
  public static applyColorSchemeToShifts(shifts: IShiftInfo[]): Array<IShiftInfo & { 
    colorScheme: {
      backgroundColor: string;
      textColor: string;
      borderColor: string;
      priority: ColorPriority;
      reason: string;
    } 
  }> {
    return shifts.map(shift => {
      let backgroundColor = TIMETABLE_COLORS.DEFAULT_BACKGROUND;
      let textColor = '#000000';
      let borderColor = '#cccccc';
      let priority = ColorPriority.DEFAULT;
      let reason = 'Default styling';
      
      // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
      if ((shift.isHoliday || false) && shift.holidayColor) {
        backgroundColor = shift.holidayColor;
        priority = ColorPriority.HOLIDAY;
        reason = 'Holiday takes highest priority';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —è—Ä–∫–æ—Å—Ç–∏ —Ñ–æ–Ω–∞
        const rgb = this.hexToRgb(shift.holidayColor);
        if (rgb) {
          const brightness = (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
          textColor = brightness > 128 ? '#000000' : '#ffffff';
        }
        
        borderColor = this.darkenHexColor(shift.holidayColor, 0.2);
      }
      // –ü–†–ò–û–†–ò–¢–ï–¢ 2: –¢–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–∞)
      else if (shift.typeOfLeaveColor) {
        backgroundColor = shift.typeOfLeaveColor;
        priority = ColorPriority.LEAVE_TYPE;
        reason = 'Leave type color';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —è—Ä–∫–æ—Å—Ç–∏ —Ñ–æ–Ω–∞
        const rgb = this.hexToRgb(shift.typeOfLeaveColor);
        if (rgb) {
          const brightness = (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
          textColor = brightness > 128 ? '#000000' : '#ffffff';
        }
        
        borderColor = this.darkenHexColor(shift.typeOfLeaveColor, 0.2);
      }
      
      return {
        ...shift,
        colorScheme: {
          backgroundColor,
          textColor,
          borderColor,
          priority,
          reason
        }
      };
    });
  }

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
   */
  public static getTextColorForBackground(backgroundColor: string): string {
    const rgb = this.hexToRgb(backgroundColor);
    if (!rgb) return '#000000';
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —è—Ä–∫–æ—Å—Ç–∏
    const brightness = (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    return brightness > 128 ? '#000000' : '#ffffff';
  }

  /**
   * –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞–µ—Ç CSS —Å—Ç–∏–ª–∏ –¥–ª—è —è—á–µ–π–∫–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
   */
  public static createCellStyles(
    shifts: IShiftInfo[], 
    getLeaveTypeColor?: (typeOfLeaveId: string) => string | undefined
  ): {
    backgroundColor?: string;
    color?: string;
    border?: string;
    borderRadius?: string;
    textShadow?: string;
    priority: ColorPriority;
    reason: string;
  } {
    const analysis = this.resolveCellColor(shifts, getLeaveTypeColor);
    
    if (analysis.finalColor === TIMETABLE_COLORS.DEFAULT_BACKGROUND) {
      return {
        priority: analysis.appliedPriority,
        reason: analysis.reasons.join('; ')
      };
    }
    
    const textColor = this.getTextColorForBackground(analysis.finalColor);
    const borderColor = this.darkenHexColor(analysis.finalColor, 0.2);
    
    return {
      backgroundColor: analysis.finalColor,
      color: textColor,
      border: `1px solid ${borderColor}`,
      borderRadius: '3px',
      textShadow: textColor === '#ffffff' ? '0 1px 2px rgba(0,0,0,0.3)' : 'none',
      priority: analysis.appliedPriority,
      reason: analysis.reasons.join('; ')
    };
  }

  /**
   * –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î: –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ createCellStyles)
   */
  public static createLeaveCellStyles(shifts: IShiftInfo[]): {
    backgroundColor?: string;
    color?: string;
    border?: string;
    borderRadius?: string;
    textShadow?: string;
  } {
    const newStyles = this.createCellStyles(shifts);
    
    // –£–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const { priority, reason, ...compatibleStyles } = newStyles;
    return compatibleStyles;
  }

  // *** –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø EXCEL –≠–ö–°–ü–û–†–¢–ê ***

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª–∏ —è—á–µ–π–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Excel —ç–∫—Å–ø–æ—Ä—Ç–∞
   * –í–µ—Ä—Å–∏—è 3.2: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–º–µ—Ç–æ–∫ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤/–æ—Ç–ø—É—Å–∫–æ–≤ –¥–∞–∂–µ –±–µ–∑ —Ä–∞–±–æ—á–∏—Ö —Å–º–µ–Ω
   */
  public static createExcelCellStyles(
    shifts: IShiftInfo[], 
    getLeaveTypeColor?: (typeOfLeaveId: string) => string | undefined,
    dayData?: IDayInfo // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–Ω–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–º–µ—Ç–æ–∫
  ): {
    backgroundColor?: string;
    color?: string;
    border?: string;
    borderRadius?: string;
    textShadow?: string;
    priority: ColorPriority;
    reason: string;
    excelFillPattern?: any;
    excelFont?: any;
  } {
    console.log('[TimetableShiftCalculatorLeaveTypes] Creating Excel cell styles with full markers support v3.2');

    // *** –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –î–õ–Ø EXCEL –í–ö–õ–Æ–ß–ê–Ø –î–ù–ò –ë–ï–ó –°–ú–ï–ù ***
    const hasWorkShifts = shifts.some(s => s.workMinutes > 0);
    const hasHolidayInShifts = shifts.some(s => s.isHoliday);
    const hasLeaveInShifts = shifts.some(s => s.typeOfLeaveId);
    
    // *** –ù–û–í–û–ï: –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ—Ç–æ–∫ –∏–∑ dayData (–¥–Ω–∏ –±–µ–∑ —Å–º–µ–Ω) ***
    const hasHolidayMarker = dayData?.hasHoliday && !hasWorkShifts;
    const hasLeaveMarker = dayData?.hasLeave && !hasWorkShifts && !hasHolidayMarker;
    
    const finalHasHoliday = hasHolidayInShifts || hasHolidayMarker;
    const finalHasLeave = hasLeaveInShifts || hasLeaveMarker;

    console.log('[TimetableShiftCalculatorLeaveTypes] Excel cell analysis:', {
      hasWorkShifts,
      hasHolidayInShifts,
      hasLeaveInShifts,
      hasHolidayMarker,
      hasLeaveMarker,
      finalHasHoliday,
      finalHasLeave
    });

    let backgroundColor = TIMETABLE_COLORS.DEFAULT_BACKGROUND;
    let priority = ColorPriority.DEFAULT;
    let reason = 'Default styling';

    // *** –°–ò–°–¢–ï–ú–ê –ü–†–ò–û–†–ò–¢–ï–¢–û–í –î–õ–Ø EXCEL ***
    if (finalHasHoliday) {
      backgroundColor = TIMETABLE_COLORS.HOLIDAY;
      priority = ColorPriority.HOLIDAY;
      reason = hasHolidayInShifts ? 
        'Holiday in work shifts (highest priority)' : 
        'Holiday marker without work shifts (highest priority)';
      
      console.log(`[TimetableShiftCalculatorLeaveTypes] üî¥ Excel HOLIDAY color applied: ${backgroundColor}`);
    } else if (finalHasLeave) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –æ—Ç–ø—É—Å–∫–∞
      let leaveColor: string | undefined;
      
      if (hasLeaveInShifts && getLeaveTypeColor) {
        // –¶–≤–µ—Ç –∏–∑ —Å–º–µ–Ω —Å —Ä–∞–±–æ—Ç–æ–π
        leaveColor = this.getDominantLeaveColor(shifts, getLeaveTypeColor);
      } else if (hasLeaveMarker && dayData?.leaveTypeColor) {
        // –¶–≤–µ—Ç –∏–∑ –æ—Ç–º–µ—Ç–∫–∏ –¥–Ω—è –±–µ–∑ —Ä–∞–±–æ—Ç—ã
        leaveColor = dayData.leaveTypeColor;
      }
      
      if (leaveColor) {
        backgroundColor = leaveColor;
        priority = ColorPriority.LEAVE_TYPE;
        reason = hasLeaveInShifts ? 
          'Leave type in work shifts' : 
          'Leave type marker without work shifts';
        
        console.log(`[TimetableShiftCalculatorLeaveTypes] üü° Excel LEAVE color applied: ${backgroundColor}`);
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    const textColor = this.getTextColorForBackground(backgroundColor);
    const borderColor = this.darkenHexColor(backgroundColor, 0.2);

    // *** –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –°–¢–ò–õ–ò –î–õ–Ø EXCEL ***
    const excelFillPattern = backgroundColor !== TIMETABLE_COLORS.DEFAULT_BACKGROUND ? {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: `FF${backgroundColor.replace('#', '')}` }
    } : undefined;

    const excelFont = backgroundColor !== TIMETABLE_COLORS.DEFAULT_BACKGROUND ? {
      color: { argb: textColor === '#ffffff' ? 'FFFFFFFF' : 'FF000000' },
      bold: priority === ColorPriority.HOLIDAY // –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
    } : undefined;

    return {
      backgroundColor,
      color: textColor,
      border: backgroundColor !== TIMETABLE_COLORS.DEFAULT_BACKGROUND ? `1px solid ${borderColor}` : undefined,
      borderRadius: '3px',
      textShadow: textColor === '#ffffff' ? '0 1px 2px rgba(0,0,0,0.3)' : 'none',
      priority,
      reason,
      excelFillPattern,
      excelFont
    };
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ–Ω—å –¥–ª—è Excel —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–∫–ª—é—á–∞—è –æ—Ç–º–µ—Ç–∫–∏ –±–µ–∑ —Å–º–µ–Ω
   * –í–µ—Ä—Å–∏—è 3.2: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
   */
  public static analyzeExcelDayData(
    shifts: IShiftInfo[],
    dayData?: IDayInfo,
    getLeaveTypeColor?: (typeOfLeaveId: string) => string | undefined
  ): {
    hasAnyData: boolean;
    hasWorkData: boolean;
    hasHolidayData: boolean;
    hasLeaveData: boolean;
    displayText: string;
    colorInfo: {
      shouldApplyColor: boolean;
      backgroundColor?: string;
      textColor?: string;
      priority: ColorPriority;
    };
  } {
    console.log('[TimetableShiftCalculatorLeaveTypes] Analyzing day data for Excel export v3.2');

    const hasWorkShifts = shifts.some(s => s.workMinutes > 0);
    const hasHolidayInShifts = shifts.some(s => s.isHoliday);
    const hasLeaveInShifts = shifts.some(s => s.typeOfLeaveId);
    
    // –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ—Ç–æ–∫ –±–µ–∑ —Ä–∞–±–æ—Ç—ã
    const hasHolidayMarker = dayData?.hasHoliday && !hasWorkShifts;
    const hasLeaveMarker = dayData?.hasLeave && !hasWorkShifts && !hasHolidayMarker;
    
    const hasAnyData = hasWorkShifts || hasHolidayMarker || hasLeaveMarker;
    const hasWorkData = hasWorkShifts;
    const hasHolidayData = hasHolidayInShifts || hasHolidayMarker;
    const hasLeaveData = hasLeaveInShifts || hasLeaveMarker;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let displayText = '';
    if (hasWorkShifts) {
      // –ï—Å—Ç—å —Ä–∞–±–æ—á–∏–µ —Å–º–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      displayText = this.formatShiftsForExcel(shifts);
    } else if (hasHolidayMarker) {
      // –¢–æ–ª—å–∫–æ –æ—Ç–º–µ—Ç–∫–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
      displayText = 'Holiday';
    } else if (hasLeaveMarker) {
      // –¢–æ–ª—å–∫–æ –æ—Ç–º–µ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞
      displayText = 'Leave';
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const cellStyles = this.createExcelCellStyles(shifts, getLeaveTypeColor, dayData);
    
    const colorInfo = {
      shouldApplyColor: cellStyles.backgroundColor !== TIMETABLE_COLORS.DEFAULT_BACKGROUND,
      backgroundColor: cellStyles.backgroundColor,
      textColor: cellStyles.color,
      priority: cellStyles.priority
    };

    const analysis = {
      hasAnyData,
      hasWorkData,
      hasHolidayData,
      hasLeaveData,
      displayText,
      colorInfo
    };

    console.log('[TimetableShiftCalculatorLeaveTypes] Excel day analysis result:', analysis);
    return analysis;
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è –¥–ª—è Excel —ç–∫—Å–ø–æ—Ä—Ç–∞
   * –í–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–∞—Ö, –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –∏ –æ—Ç–ø—É—Å–∫–∞—Ö
   */
  public static createExcelDayDescription(
    shifts: IShiftInfo[],
    dayData?: IDayInfo,
    typesOfLeave?: Array<{ id: string; title: string; color?: string }>
  ): {
    primaryText: string;
    additionalInfo: string[];
    fullDescription: string;
    hasMarkers: boolean;
  } {
    const analysis = this.analyzeExcelDayData(shifts, dayData);
    
    let primaryText = analysis.displayText;
    const additionalInfo: string[] = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (analysis.hasHolidayData) {
      if (shifts.some(s => s.isHoliday && s.workMinutes > 0)) {
        additionalInfo.push('Working Holiday');
      } else {
        additionalInfo.push('Holiday');
      }
    }
    
    if (analysis.hasLeaveData && typesOfLeave) {
      const leaveTypes = new Set<string>();
      
      // –°–æ–±–∏—Ä–∞–µ–º —Ç–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤ –∏–∑ —Å–º–µ–Ω
      shifts.forEach(shift => {
        if (shift.typeOfLeaveId) {
          const leaveType = typesOfLeave.find(lt => lt.id === shift.typeOfLeaveId);
          if (leaveType) {
            leaveTypes.add(leaveType.title);
          }
        }
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤ –∏–∑ –æ—Ç–º–µ—Ç–æ–∫ –¥–Ω—è
      if (dayData?.hasLeave && !analysis.hasWorkData) {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ—Ç–ø—É—Å–∫–∞ –ø–æ —Ü–≤–µ—Ç—É
        if (dayData.leaveTypeColor && typesOfLeave) {
          const leaveType = typesOfLeave.find(lt => lt.color === dayData.leaveTypeColor);
          if (leaveType) {
            leaveTypes.add(leaveType.title);
          }
        }
      }
      
      if (leaveTypes.size > 0) {
        const leaveTypesArray: string[] = [];
        leaveTypes.forEach(type => leaveTypesArray.push(type));
        additionalInfo.push(`Leave: ${leaveTypesArray.join(', ')}`);
      }
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    let fullDescription = primaryText;
    if (additionalInfo.length > 0) {
      if (fullDescription) {
        fullDescription += '\n' + additionalInfo.join('\n');
      } else {
        fullDescription = additionalInfo.join('\n');
      }
    }
    
    return {
      primaryText,
      additionalInfo,
      fullDescription,
      hasMarkers: additionalInfo.length > 0
    };
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–º–µ–Ω—ã –¥–ª—è Excel —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  private static formatShiftsForExcel(shifts: IShiftInfo[]): string {
    if (shifts.length === 0) {
      return '';
    }

    if (shifts.length === 1) {
      return shifts[0].formattedShift;
    }

    // –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–º–µ–Ω - –æ–±—ä–µ–¥–∏–Ω—è–µ–º —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    return shifts.map(shift => shift.formattedShift).join('\n');
  }

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ Excel —ç–∫—Å–ø–æ—Ä—Ç—É
   * –í–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ—Ç–º–µ—Ç–∫–∞—Ö –±–µ–∑ —Å–º–µ–Ω
   */
  public static getExcelExportStatistics(
    weeksData: Array<{
      weekInfo: any;
      staffRows: Array<{
        staffName: string;
        weekData: {
          days: { [dayNumber: number]: IDayInfo };
        };
      }>;
    }>
  ): {
    totalDays: number;
    daysWithWorkShifts: number;
    daysWithHolidayMarkers: number;
    daysWithLeaveMarkers: number;
    daysWithMixedData: number;
    totalHolidayDays: number;
    totalLeaveDays: number;
    coloredCellsCount: number;
    exportQuality: string;
  } {
    let totalDays = 0;
    let daysWithWorkShifts = 0;
    let daysWithHolidayMarkers = 0;
    let daysWithLeaveMarkers = 0;
    let daysWithMixedData = 0;
    let totalHolidayDays = 0;
    let totalLeaveDays = 0;
    let coloredCellsCount = 0;

    weeksData.forEach(weekGroup => {
      weekGroup.staffRows.forEach(staffRow => {
        Object.values(staffRow.weekData.days).forEach((dayData: IDayInfo) => {
          totalDays++;
          
          const hasWorkShifts = dayData.shifts && dayData.shifts.some(s => s.workMinutes > 0);
          const hasHolidayMarker = dayData.hasHoliday && !hasWorkShifts;
          const hasLeaveMarker = dayData.hasLeave && !hasWorkShifts && !hasHolidayMarker;
          const hasHolidayInWork = dayData.shifts && dayData.shifts.some(s => s.isHoliday && s.workMinutes > 0);
          const hasLeaveInWork = dayData.shifts && dayData.shifts.some(s => s.typeOfLeaveId && s.workMinutes > 0);
          
          if (hasWorkShifts) {
            daysWithWorkShifts++;
          }
          
          if (hasHolidayMarker) {
            daysWithHolidayMarkers++;
          }
          
          if (hasLeaveMarker) {
            daysWithLeaveMarkers++;
          }
          
          if ((hasWorkShifts && (hasHolidayInWork || hasLeaveInWork)) || 
              (hasHolidayMarker && hasLeaveMarker)) {
            daysWithMixedData++;
          }
          
          if (dayData.hasHoliday) {
            totalHolidayDays++;
          }
          
          if (dayData.hasLeave) {
            totalLeaveDays++;
          }
          
          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–≤–µ—Ç–Ω—ã–µ —è—á–µ–π–∫–∏
          if (dayData.finalCellColor && dayData.finalCellColor !== TIMETABLE_COLORS.DEFAULT_BACKGROUND) {
            coloredCellsCount++;
          }
        });
      });
    });

    let exportQuality = 'UNKNOWN';
    const dataRatio = (daysWithWorkShifts + daysWithHolidayMarkers + daysWithLeaveMarkers) / totalDays;
    
    if (dataRatio > 0.8) {
      exportQuality = 'EXCELLENT - High data coverage';
    } else if (dataRatio > 0.5) {
      exportQuality = 'GOOD - Moderate data coverage';
    } else if (dataRatio > 0.2) {
      exportQuality = 'FAIR - Limited data coverage';
    } else {
      exportQuality = 'POOR - Very limited data';
    }

    return {
      totalDays,
      daysWithWorkShifts,
      daysWithHolidayMarkers,
      daysWithLeaveMarkers,
      daysWithMixedData,
      totalHolidayDays,
      totalLeaveDays,
      coloredCellsCount,
      exportQuality
    };
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ü–≤–µ—Ç–∞–º –¥–ª—è Excel —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  public static createExcelColorLegend(
    weeksData: Array<{
      weekInfo: any;
      staffRows: Array<{
        staffName: string;
        weekData: {
          days: { [dayNumber: number]: IDayInfo };
        };
      }>;
    }>,
    typesOfLeave?: Array<{ id: string; title: string; color?: string }>
  ): {
    holidayColor: {
      color: string;
      name: string;
      usage: number;
    };
    leaveColors: Array<{
      color: string;
      name: string;
      usage: number;
      typeId: string;
    }>;
    totalColoredCells: number;
  } {
    const leaveColorUsage = new Map<string, { name: string; usage: number; typeId: string }>();
    let holidayUsage = 0;
    let totalColoredCells = 0;

    weeksData.forEach(weekGroup => {
      weekGroup.staffRows.forEach(staffRow => {
        Object.values(staffRow.weekData.days).forEach((dayData: IDayInfo) => {
          if (dayData.finalCellColor && dayData.finalCellColor !== TIMETABLE_COLORS.DEFAULT_BACKGROUND) {
            totalColoredCells++;
            
            if (dayData.hasHoliday) {
              holidayUsage++;
            } else if (dayData.hasLeave && dayData.leaveTypeColor) {
              const color = dayData.leaveTypeColor;
              const existing = leaveColorUsage.get(color);
              
              if (existing) {
                existing.usage++;
              } else {
                // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–ø—É—Å–∫–∞
                let name = 'Unknown Leave Type';
                let typeId = 'unknown';
                
                if (typesOfLeave) {
                  const leaveType = typesOfLeave.find(lt => lt.color === color);
                  if (leaveType) {
                    name = leaveType.title;
                    typeId = leaveType.id;
                  }
                }
                
                leaveColorUsage.set(color, { name, usage: 1, typeId });
              }
            }
          }
        });
      });
    });

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Map –≤ –º–∞—Å—Å–∏–≤
    const leaveColors: Array<{
      color: string;
      name: string;
      usage: number;
      typeId: string;
    }> = [];
    
    leaveColorUsage.forEach((data, color) => {
      leaveColors.push({
        color,
        name: data.name,
        usage: data.usage,
        typeId: data.typeId
      });
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    leaveColors.sort((a, b) => b.usage - a.usage);

    return {
      holidayColor: {
        color: TIMETABLE_COLORS.HOLIDAY,
        name: 'Holiday',
        usage: holidayUsage
      },
      leaveColors,
      totalColoredCells
    };
  }

  // *** –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ***

  /**
   * –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –ú–ï–¢–û–î: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç HEX —Ü–≤–µ—Ç –≤ RGB
   */
  private static hexToRgb(hex: string): { r: number; g: number; b: number } | null {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    } : null;
  }

  /**
   * –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –ú–ï–¢–û–î: –ó–∞—Ç–µ–º–Ω—è–µ—Ç HEX —Ü–≤–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
   */
  private static darkenHexColor(hex: string, percent: number): string {
    const rgb = this.hexToRgb(hex);
    if (!rgb) return hex;
    
    const darken = (color: number) => Math.max(0, Math.floor(color * (1 - percent)));
    
    const r = darken(rgb.r).toString(16).padStart(2, '0');
    const g = darken(rgb.g).toString(16).padStart(2, '0');
    const b = darken(rgb.b).toString(16).padStart(2, '0');
    
    return `#${r}${g}${b}`;
  }

  // *** –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–ï–†–°–ò–ò –ò –í–û–ó–ú–û–ñ–ù–û–°–¢–Ø–• ***

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∫–ª–∞—Å—Å–∞
   */
  public static getCapabilities(): {
    version: string;
    supportedFeatures: string[];
    holidaySupport: boolean;
    excelExportSupport: boolean;
    prioritySystem: string[];
    compatibilityLevel: string;
  } {
    return {
      version: '3.2',
      supportedFeatures: [
        'Holiday Priority System',
        'Leave Type Colors',
        'Non-work Day Markers',
        'Excel Export Support',
        'Color Priority Resolution',
        'Advanced Statistics',
        'Gradient Generation',
        'Text Contrast Calculation'
      ],
      holidaySupport: true,
      excelExportSupport: true,
      prioritySystem: [
        '1. Holiday (Red) - Highest Priority',
        '2. Leave Types (Colored) - Medium Priority', 
        '3. Default (White) - Lowest Priority'
      ],
      compatibilityLevel: 'Full backward compatibility with v2.x and v3.0/3.1'
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤
   */
  public static validateColorConfiguration(
    shifts: IShiftInfo[],
    getLeaveTypeColor?: (typeOfLeaveId: string) => string | undefined
  ): {
    isValid: boolean;
    issues: string[];
    recommendations: string[];
    colorAnalysis: {
      totalShifts: number;
      shiftsWithHoliday: number;
      shiftsWithLeaveType: number;
      shiftsWithValidColors: number;
      missingColors: string[];
    };
  } {
    const issues: string[] = [];
    const recommendations: string[] = [];
    
    const totalShifts = shifts.length;
    const shiftsWithHoliday = shifts.filter(s => s.isHoliday).length;
    const shiftsWithLeaveType = shifts.filter(s => s.typeOfLeaveId).length;
    let shiftsWithValidColors = 0;
    const missingColors = new Set<string>();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
    shifts.forEach(shift => {
      if (shift.isHoliday && shift.holidayColor) {
        shiftsWithValidColors++;
      } else if (shift.isHoliday && !shift.holidayColor) {
        issues.push(`Holiday shift ${shift.recordId} missing holiday color`);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤
    shifts.forEach(shift => {
      if (shift.typeOfLeaveId) {
        if (shift.typeOfLeaveColor) {
          shiftsWithValidColors++;
        } else if (getLeaveTypeColor) {
          const color = getLeaveTypeColor(shift.typeOfLeaveId);
          if (color) {
            shiftsWithValidColors++;
          } else {
            missingColors.add(shift.typeOfLeaveId);
          }
        } else {
          issues.push(`Leave shift ${shift.recordId} missing color function`);
        }
      }
    });

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (shiftsWithHoliday === 0 && shiftsWithLeaveType === 0) {
      recommendations.push('No special shifts found - colors will be default');
    }
    
    if (missingColors.size > 0) {
      recommendations.push(`Configure colors for leave types: ${Array.from(missingColors).join(', ')}`);
    }
    
    if (shiftsWithHoliday > 0 && shiftsWithLeaveType > 0) {
      recommendations.push('Holiday priority system active - leave colors will be overridden by holidays');
    }

    const isValid = issues.length === 0;

    return {
      isValid,
      issues,
      recommendations,
      colorAnalysis: {
        totalShifts,
        shiftsWithHoliday,
        shiftsWithLeaveType,
        shiftsWithValidColors,
        missingColors: Array.from(missingColors)
      }
    };
  }
}