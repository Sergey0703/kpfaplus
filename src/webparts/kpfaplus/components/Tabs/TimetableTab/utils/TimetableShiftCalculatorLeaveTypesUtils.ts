// src/webparts/kpfaplus/components/Tabs/TimetableTab/utils/TimetableShiftCalculatorLeaveTypesUtils.ts
import { 
  IShiftInfo, 
  TIMETABLE_COLORS, 
  ColorPriority
} from '../interfaces/TimetableInterfaces';
import { TimetableShiftCalculatorLeaveTypesCore } from './TimetableShiftCalculatorLeaveTypesCore';

/**
 * –£–¢–ò–õ–ò–¢–´ –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–ø–∞–º–∏ –æ—Ç–ø—É—Å–∫–æ–≤
 * –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
 * –í–µ—Ä—Å–∏—è 3.2 - –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
 */
export class TimetableShiftCalculatorLeaveTypesUtils {

  // *** –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï ***

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∞—Ö –æ—Ç–ø—É—Å–∫–æ–≤ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –≤ –¥–Ω–µ
   */
  public static formatLeaveInfo(shifts: IShiftInfo[]): string {
    const holidayShifts = shifts.filter(s => s.isHoliday || false).length;
    const leaveTypes = TimetableShiftCalculatorLeaveTypesCore.getUniqueLeaveTypes(shifts);
    
    const info: string[] = [];
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    if (holidayShifts > 0) {
      info.push(`üî¥ Holiday (${holidayShifts})`);
    }
    
    // –ó–∞—Ç–µ–º –æ—Ç–ø—É—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏–ª–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
    if (leaveTypes.length > 0) {
      if (holidayShifts > 0) {
        info.push(`[Overridden: ${leaveTypes.map(lt => `${lt.title} (${lt.count})`).join(', ')}]`);
      } else {
        info.push(leaveTypes.map(lt => `${lt.title} (${lt.count})`).join(', '));
      }
    }
    
    return info.join(' + ');
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
   */
  public static getFirstHolidayColor(shifts: IShiftInfo[]): string | undefined {
    const holidayShift = shifts.find(shift => shift.isHoliday || false);
    return holidayShift?.holidayColor;
  }

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–ø—É—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤)
   */
  public static getFirstLeaveColor(shifts: IShiftInfo[]): string | undefined {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
    if (TimetableShiftCalculatorLeaveTypesCore.hasHolidays(shifts)) {
      return undefined; // –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    }
    
    const shiftWithLeave = shifts.find(shift => shift.typeOfLeaveColor);
    return shiftWithLeave?.typeOfLeaveColor;
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –¥–µ–Ω—å –ø—Ä–∞–∑–¥–Ω–∏–∫
   */
  public static hasSpecificHoliday(shifts: IShiftInfo[]): boolean {
    return shifts.some(shift => shift.isHoliday || false);
  }

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –¥–µ–Ω—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–ø—É—Å–∫–∞
   */
  public static hasSpecificLeaveType(shifts: IShiftInfo[], leaveTypeId: string): boolean {
    return shifts.some(shift => shift.typeOfLeaveId === leaveTypeId);
  }

  // *** –¶–í–ï–¢–û–í–´–ï –°–•–ï–ú–´ –ò –°–¢–ò–õ–ò ***

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ü–≤–µ—Ç–∞ –≤ –¥–Ω–µ —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
   */
  public static getAllColorsWithPriority(shifts: IShiftInfo[]): {
    holidayColors: string[];
    leaveColors: string[];
    finalColor: string;
    priorityReason: string;
  } {
    const holidayColors: string[] = [];
    const leaveColors: string[] = [];
    
    shifts.forEach(shift => {
      if ((shift.isHoliday || false) && shift.holidayColor) {
        if (!holidayColors.includes(shift.holidayColor)) {
          holidayColors.push(shift.holidayColor);
        }
      }
      if (shift.typeOfLeaveColor) {
        if (!leaveColors.includes(shift.typeOfLeaveColor)) {
          leaveColors.push(shift.typeOfLeaveColor);
        }
      }
    });
    
    let finalColor = TIMETABLE_COLORS.DEFAULT_BACKGROUND;
    let priorityReason = 'Default';
    
    if (holidayColors.length > 0) {
      finalColor = holidayColors[0]; // –ü–µ—Ä–≤—ã–π –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π —Ü–≤–µ—Ç
      priorityReason = `Holiday priority (${holidayColors.length} holiday colors)`;
    } else if (leaveColors.length > 0) {
      finalColor = leaveColors[0]; // –ü–µ—Ä–≤—ã–π —Ü–≤–µ—Ç –æ—Ç–ø—É—Å–∫–∞
      priorityReason = `Leave type priority (${leaveColors.length} leave colors)`;
    }
    
    return {
      holidayColors,
      leaveColors,
      finalColor,
      priorityReason
    };
  }

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ü–≤–µ—Ç–∞ –æ—Ç–ø—É—Å–∫–æ–≤ –≤ –¥–Ω–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  public static getAllLeaveColors(shifts: IShiftInfo[]): string[] {
    const colorsSet = new Set<string>();
    shifts.forEach(shift => {
      if (shift.typeOfLeaveColor) {
        colorsSet.add(shift.typeOfLeaveColor);
      }
    });
    
    const colors: string[] = [];
    colorsSet.forEach(color => colors.push(color));
    return colors;
  }

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
   */
  public static createLeaveColorsGradient(shifts: IShiftInfo[]): string | undefined {
    const analysis = this.getAllColorsWithPriority(shifts);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —Ü–≤–µ—Ç–∞
    if (analysis.holidayColors.length > 0) {
      if (analysis.holidayColors.length === 1) {
        return analysis.holidayColors[0];
      }
      // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
      const gradientStops = analysis.holidayColors.map((color, index) => {
        const percentage = (index / (analysis.holidayColors.length - 1)) * 100;
        return `${color} ${percentage}%`;
      }).join(', ');
      return `linear-gradient(45deg, ${gradientStops})`;
    }
    
    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–∞ –æ—Ç–ø—É—Å–∫–æ–≤
    const leaveColors = analysis.leaveColors;
    if (leaveColors.length === 0) {
      return undefined;
    }
    
    if (leaveColors.length === 1) {
      return leaveColors[0];
    }
    
    // –°–æ–∑–¥–∞–µ–º CSS –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤ –æ—Ç–ø—É—Å–∫–æ–≤
    const gradientStops = leaveColors.map((color, index) => {
      const percentage = (index / (leaveColors.length - 1)) * 100;
      return `${color} ${percentage}%`;
    }).join(', ');
    
    return `linear-gradient(45deg, ${gradientStops})`;
  }

  // *** –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–ó ***

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –æ—Ç–ø—É—Å–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
   */
  public static getLeaveTypesStatistics(shifts: IShiftInfo[]): {
    totalShiftsWithLeave: number;
    uniqueLeaveTypes: number;
    leaveTypeBreakdown: Array<{
      id: string;
      title: string;
      color: string;
      count: number;
      percentage: number;
      isOverriddenByHoliday: boolean;
    }>;
    mostCommonLeaveType?: {
      id: string;
      title: string;
      color: string;
      count: number;
    };
    holidayStatistics: {
      totalHolidayShifts: number;
      holidayPercentage: number;
      overridesLeaveTypes: boolean;
    };
  } {
    const leaveTypes = TimetableShiftCalculatorLeaveTypesCore.getUniqueLeaveTypes(shifts);
    const totalShiftsWithLeave = shifts.filter(s => s.typeOfLeaveId).length;
    const totalHolidayShifts = shifts.filter(s => s.isHoliday || false).length;
    
    const leaveTypeBreakdown = leaveTypes.map(lt => ({
      ...lt,
      percentage: totalShiftsWithLeave > 0 ? Math.round((lt.count / totalShiftsWithLeave) * 100) : 0
    }));
    
    const mostCommonLeaveType = leaveTypes.length > 0 ? leaveTypes[0] : undefined;
    
    const holidayPercentage = shifts.length > 0 ? Math.round((totalHolidayShifts / shifts.length) * 100) : 0;
    
    return {
      totalShiftsWithLeave,
      uniqueLeaveTypes: leaveTypes.length,
      leaveTypeBreakdown,
      mostCommonLeaveType,
      holidayStatistics: {
        totalHolidayShifts,
        holidayPercentage,
        overridesLeaveTypes: totalHolidayShifts > 0
      }
    };
  }

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
   */
  public static applyColorSchemeToShifts(shifts: IShiftInfo[]): Array<IShiftInfo & { 
    colorScheme: {
      backgroundColor: string;
      textColor: string;
      borderColor: string;
      priority: ColorPriority;
      reason: string;
    } 
  }> {
    return shifts.map(shift => {
      let backgroundColor = TIMETABLE_COLORS.DEFAULT_BACKGROUND;
      let textColor = '#000000';
      let borderColor = '#cccccc';
      let priority = ColorPriority.DEFAULT;
      let reason = 'Default styling';
      
      // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
      if ((shift.isHoliday || false) && shift.holidayColor) {
        backgroundColor = shift.holidayColor;
        priority = ColorPriority.HOLIDAY;
        reason = 'Holiday takes highest priority';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —è—Ä–∫–æ—Å—Ç–∏ —Ñ–æ–Ω–∞
        const rgb = this.hexToRgb(shift.holidayColor);
        if (rgb) {
          const brightness = (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
          textColor = brightness > 128 ? '#000000' : '#ffffff';
        }
        
        borderColor = this.darkenHexColor(shift.holidayColor, 0.2);
      }
      // –ü–†–ò–û–†–ò–¢–ï–¢ 2: –¢–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–∞)
      else if (shift.typeOfLeaveColor) {
        backgroundColor = shift.typeOfLeaveColor;
        priority = ColorPriority.LEAVE_TYPE;
        reason = 'Leave type color';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —è—Ä–∫–æ—Å—Ç–∏ —Ñ–æ–Ω–∞
        const rgb = this.hexToRgb(shift.typeOfLeaveColor);
        if (rgb) {
          const brightness = (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
          textColor = brightness > 128 ? '#000000' : '#ffffff';
        }
        
        borderColor = this.darkenHexColor(shift.typeOfLeaveColor, 0.2);
      }
      
      return {
        ...shift,
        colorScheme: {
          backgroundColor,
          textColor,
          borderColor,
          priority,
          reason
        }
      };
    });
  }

  // *** –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ü–†–û–í–ï–†–ö–ê ***

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤
   */
  public static validateColorConfiguration(
    shifts: IShiftInfo[],
    getLeaveTypeColor?: (typeOfLeaveId: string) => string | undefined
  ): {
    isValid: boolean;
    issues: string[];
    recommendations: string[];
    colorAnalysis: {
      totalShifts: number;
      shiftsWithHoliday: number;
      shiftsWithLeaveType: number;
      shiftsWithValidColors: number;
      missingColors: string[];
    };
  } {
    const issues: string[] = [];
    const recommendations: string[] = [];
    
    const totalShifts = shifts.length;
    const shiftsWithHoliday = shifts.filter(s => s.isHoliday).length;
    const shiftsWithLeaveType = shifts.filter(s => s.typeOfLeaveId).length;
    let shiftsWithValidColors = 0;
    const missingColors = new Set<string>();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
    shifts.forEach(shift => {
      if (shift.isHoliday && shift.holidayColor) {
        shiftsWithValidColors++;
      } else if (shift.isHoliday && !shift.holidayColor) {
        issues.push(`Holiday shift ${shift.recordId} missing holiday color`);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤
    shifts.forEach(shift => {
      if (shift.typeOfLeaveId) {
        if (shift.typeOfLeaveColor) {
          shiftsWithValidColors++;
        } else if (getLeaveTypeColor) {
          const color = getLeaveTypeColor(shift.typeOfLeaveId);
          if (color) {
            shiftsWithValidColors++;
          } else {
            missingColors.add(shift.typeOfLeaveId);
          }
        } else {
          issues.push(`Leave shift ${shift.recordId} missing color function`);
        }
      }
    });

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (shiftsWithHoliday === 0 && shiftsWithLeaveType === 0) {
      recommendations.push('No special shifts found - colors will be default');
    }
    
    if (missingColors.size > 0) {
      recommendations.push(`Configure colors for leave types: ${Array.from(missingColors).join(', ')}`);
    }
    
    if (shiftsWithHoliday > 0 && shiftsWithLeaveType > 0) {
      recommendations.push('Holiday priority system active - leave colors will be overridden by holidays');
    }

    const isValid = issues.length === 0;

    return {
      isValid,
      issues,
      recommendations,
      colorAnalysis: {
        totalShifts,
        shiftsWithHoliday,
        shiftsWithLeaveType,
        shiftsWithValidColors,
        missingColors: Array.from(missingColors)
      }
    };
  }

  // *** –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–ï–†–°–ò–ò –ò –í–û–ó–ú–û–ñ–ù–û–°–¢–Ø–• ***

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∫–ª–∞—Å—Å–∞
   */
  public static getCapabilities(): {
    version: string;
    supportedFeatures: string[];
    holidaySupport: boolean;
    excelExportSupport: boolean;
    prioritySystem: string[];
    compatibilityLevel: string;
  } {
    return {
      version: '3.2',
      supportedFeatures: [
        'Holiday Priority System',
        'Leave Type Colors',
        'Non-work Day Markers',
        'Excel Export Support',
        'Color Priority Resolution',
        'Advanced Statistics',
        'Gradient Generation',
        'Text Contrast Calculation'
      ],
      holidaySupport: true,
      excelExportSupport: true,
      prioritySystem: [
        '1. Holiday (Red) - Highest Priority',
        '2. Leave Types (Colored) - Medium Priority', 
        '3. Default (White) - Lowest Priority'
      ],
      compatibilityLevel: 'Full backward compatibility with v2.x and v3.0/3.1'
    };
  }

  // *** –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ***

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç HEX —Ü–≤–µ—Ç –≤ RGB
   */
  private static hexToRgb(hex: string): { r: number; g: number; b: number } | null {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    } : null;
  }

  /**
   * –ó–∞—Ç–µ–º–Ω—è–µ—Ç HEX —Ü–≤–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
   */
  private static darkenHexColor(hex: string, percent: number): string {
    const rgb = this.hexToRgb(hex);
    if (!rgb) return hex;
    
    const darken = (color: number) => Math.max(0, Math.floor(color * (1 - percent)));
    
    const r = darken(rgb.r).toString(16).padStart(2, '0');
    const g = darken(rgb.g).toString(16).padStart(2, '0');
    const b = darken(rgb.b).toString(16).padStart(2, '0');
    
    return `#${r}${g}${b}`;
  }
}