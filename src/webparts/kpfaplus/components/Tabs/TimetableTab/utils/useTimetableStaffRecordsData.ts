// src/webparts/kpfaplus/components/Tabs/TimetableTab/utils/useTimetableStaffRecordsData.ts

import { useEffect, useCallback, useRef } from 'react';
import { WebPartContext } from '@microsoft/sp-webpart-base';
import { StaffRecordsService, IStaffRecord } from '../../../../services/StaffRecordsService';
import { IStaffRecordsResult, IStaffRecordsQueryParams } from '../../../../services/StaffRecordsInterfaces';
import { 
  IWeekInfo, 
  IWeekGroup,
  IStaffMember,
  ITimetableStaffRow,
  IDayInfo
} from '../interfaces/TimetableInterfaces';
import { TimetableDataProcessor } from './TimetableDataProcessor';
import { TimetableWeekCalculator } from './TimetableWeekCalculator';

interface UseTimetableStaffRecordsDataProps {
  context?: WebPartContext;
  selectedDate: Date;
  currentUserId?: string;
  managingGroupId?: string;
  staffRecordsService?: StaffRecordsService;
  weeks: IWeekInfo[];
  staffMembers: IStaffMember[];
  setWeeksData: (weeksData: IWeekGroup[]) => void;
  setStaffRecords: (records: IStaffRecord[]) => void;
  setIsLoadingStaffRecords: (isLoading: boolean) => void;
  setErrorStaffRecords: (error?: string) => void;
}

interface UseTimetableStaffRecordsDataReturn {
  loadTimetableData: (overrideDate?: Date) => Promise<void>;
  refreshTimetableData: () => Promise<void>;
}

export const useTimetableStaffRecordsData = (
  props: UseTimetableStaffRecordsDataProps
): UseTimetableStaffRecordsDataReturn => {
  const {
    context,
    selectedDate,
    currentUserId,
    managingGroupId,
    staffRecordsService,
    weeks,
    staffMembers,
    setWeeksData,
    setStaffRecords,
    setIsLoadingStaffRecords,
    setErrorStaffRecords
  } = props;

  // *** –ó–ê–©–ò–¢–ê –û–¢ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–• –ó–ê–ü–†–û–°–û–í ***
  const isLoadingRef = useRef(false);
  const lastRequestParamsRef = useRef<string>('');

  console.log('[useTimetableStaffRecordsData] Hook initialized with optimized batch loading:', {
    hasContext: !!context,
    hasStaffRecordsService: !!staffRecordsService,
    weeksCount: weeks.length,
    staffMembersCount: staffMembers.length,
    selectedDate: selectedDate.toISOString(),
    managingGroupId,
    currentUserId
  });

  const loadTimetableData = useCallback(async (overrideDate?: Date): Promise<void> => {
    const dateToUse = overrideDate || selectedDate;
    
    // *** –°–û–ó–î–ê–ï–ú –£–ù–ò–ö–ê–õ–¨–ù–´–ô –ö–õ–Æ–ß –ó–ê–ü–†–û–°–ê –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –î–£–ë–õ–ò–ö–ê–¢–û–í ***
    const requestKey = `${dateToUse.toISOString()}-${managingGroupId}-${currentUserId}-${staffMembers.length}-${weeks.length}`;
    
    console.log('[useTimetableStaffRecordsData] *** OPTIMIZED loadTimetableData CALLED ***');
    console.log('[useTimetableStaffRecordsData] Request key:', requestKey);
    console.log('[useTimetableStaffRecordsData] Last request key:', lastRequestParamsRef.current);
    console.log('[useTimetableStaffRecordsData] Is currently loading:', isLoadingRef.current);
    
    // *** –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–£–Æ–©–ò–• –ó–ê–ü–†–û–°–û–í ***
    if (isLoadingRef.current) {
      console.log('[useTimetableStaffRecordsData] üõë SKIPPING: Request already in progress');
      return;
    }
    
    if (lastRequestParamsRef.current === requestKey) {
      console.log('[useTimetableStaffRecordsData] üõë SKIPPING: Same request parameters as last time');
      return;
    }
    
    // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∞–ª—Å—è
    isLoadingRef.current = true;
    lastRequestParamsRef.current = requestKey;
    
    console.log('[useTimetableStaffRecordsData] ‚úÖ PROCEEDING: New unique request');
    console.log('[useTimetableStaffRecordsData] Using SINGLE BATCH REQUEST instead of individual requests');
    console.log('[useTimetableStaffRecordsData] Parameters:', {
      date: dateToUse.toISOString(),
      weeksCount: weeks.length,
      staffMembersCount: staffMembers.length,
      managingGroupId,
      currentUserId
    });

    if (!context || !staffRecordsService) {
      console.log('[useTimetableStaffRecordsData] Cannot load records: missing context or service');
      setStaffRecords([]);
      setWeeksData([]);
      setIsLoadingStaffRecords(false);
      setErrorStaffRecords('Service not available.');
      isLoadingRef.current = false;
      return;
    }

    if (!managingGroupId || !currentUserId) {
      console.log('[useTimetableStaffRecordsData] Cannot load records: missing managingGroupId or currentUserId');
      setStaffRecords([]);
      setWeeksData([]);
      setIsLoadingStaffRecords(false);
      setErrorStaffRecords('Group ID or User ID not available.');
      isLoadingRef.current = false;
      return;
    }

    if (weeks.length === 0) {
      console.log('[useTimetableStaffRecordsData] Cannot load records: no weeks calculated');
      setStaffRecords([]);
      setWeeksData([]);
      setIsLoadingStaffRecords(false);
      isLoadingRef.current = false;
      return;
    }

    if (staffMembers.length === 0) {
      console.log('[useTimetableStaffRecordsData] No staff members in group');
      setStaffRecords([]);
      setWeeksData([]);
      setIsLoadingStaffRecords(false);
      isLoadingRef.current = false;
      return;
    }

    try {
      setIsLoadingStaffRecords(true);
      setErrorStaffRecords(undefined);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
      const startDate = new Date(dateToUse.getFullYear(), dateToUse.getMonth(), 1);
      const endDate = new Date(dateToUse.getFullYear(), dateToUse.getMonth() + 1, 0);

      console.log('[useTimetableStaffRecordsData] Loading data for date range:', {
        startDate: startDate.toISOString(),
        endDate: endDate.toISOString(),
        totalDays: Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1
      });

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö)
      const activeStaffMembers = staffMembers.filter(staffMember => {
        const isDeleted = staffMember.deleted === 1;
        const hasEmployeeId = staffMember.employeeId && staffMember.employeeId !== '0';
        
        if (isDeleted) {
          console.log(`[useTimetableStaffRecordsData] Excluding deleted staff: ${staffMember.name}`);
          return false;
        }
        
        if (!hasEmployeeId) {
          console.log(`[useTimetableStaffRecordsData] Excluding staff without employeeId: ${staffMember.name}`);
          return false;
        }
        
        return true;
      });

      console.log(`[useTimetableStaffRecordsData] Active staff members with employeeId: ${activeStaffMembers.length}/${staffMembers.length}`);

      if (activeStaffMembers.length === 0) {
        console.log('[useTimetableStaffRecordsData] No active staff members with employeeId found');
        setStaffRecords([]);
        setWeeksData([]);
        setIsLoadingStaffRecords(false);
        isLoadingRef.current = false;
        return;
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('[useTimetableStaffRecordsData] Staff members to process:');
      activeStaffMembers.slice(0, 5).forEach((staff, index) => {
        console.log(`[useTimetableStaffRecordsData] Staff ${index + 1}:`, {
          name: staff.name,
          id: staff.id,
          employeeId: staff.employeeId,
          employeeIdType: typeof staff.employeeId
        });
      });

      // *** –ù–û–í–´–ô –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ü–û–î–•–û–î: –û–î–ò–ù –ó–ê–ü–†–û–° –ù–ê –í–°–Æ –ì–†–£–ü–ü–£ ***
      console.log(`[useTimetableStaffRecordsData] *** MAKING SINGLE BATCH REQUEST FOR ENTIRE GROUP ***`);
      console.log(`[useTimetableStaffRecordsData] Previous approach: ${activeStaffMembers.length} individual requests`);
      console.log(`[useTimetableStaffRecordsData] New approach: 1 batch request + client-side filtering`);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã (–ë–ï–ó employeeID —Ñ–∏–ª—å—Ç—Ä–∞)
      const batchQueryParams: IStaffRecordsQueryParams = {
        startDate: startDate,
        endDate: endDate,
        currentUserID: currentUserId,           // *** –§–ò–õ–¨–¢–† –ü–û –ú–ï–ù–ï–î–ñ–ï–†–£ ***
        staffGroupID: managingGroupId,          // *** –§–ò–õ–¨–¢–† –ü–û –ì–†–£–ü–ü–ï ***
        employeeID: '',                         // *** –£–ë–ò–†–ê–ï–ú –§–ò–õ–¨–¢–† –ü–û –°–û–¢–†–£–î–ù–ò–ö–£ - –ü–£–°–¢–ê–Ø –°–¢–†–û–ö–ê ***
        timeTableID: undefined,                 // –ù–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
        skip: 0,
        top: 10000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
      };

      console.log('[useTimetableStaffRecordsData] Batch query params:', batchQueryParams);
      
      const startTime = performance.now();

      // –î–µ–ª–∞–µ–º –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã
      const batchResult: IStaffRecordsResult = await staffRecordsService.getStaffRecordsWithOptions(batchQueryParams);

      const loadTime = performance.now() - startTime;

      console.log('[useTimetableStaffRecordsData] *** BATCH REQUEST COMPLETED ***');
      console.log('[useTimetableStaffRecordsData] Batch result:', {
        recordsCount: batchResult.records.length,
        totalCount: batchResult.totalCount,
        loadTimeMs: Math.round(loadTime),
        hasError: !!batchResult.error,
        estimatedSpeedupVsIndividual: `${activeStaffMembers.length}x faster (${activeStaffMembers.length} requests ‚Üí 1 request)`
      });

      if (batchResult.error) {
        throw new Error(`Batch request failed: ${batchResult.error}`);
      }

      // *** –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –°–û–¢–†–£–î–ù–ò–ö–ê–ú ***
      console.log('[useTimetableStaffRecordsData] *** PERFORMING CLIENT-SIDE FILTERING ***');

      // –°–æ–∑–¥–∞–µ–º Set —Å employeeId –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      const activeEmployeeIds = new Set(
        activeStaffMembers
          .map(staff => staff.employeeId?.toString())
          .filter(id => id && id !== '0')
      );

      console.log('[useTimetableStaffRecordsData] Active employee IDs for filtering:', Array.from(activeEmployeeIds));

      // *** –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–•–û–î–Ø–©–ò–• –î–ê–ù–ù–´–• ***
      console.log('[useTimetableStaffRecordsData] *** DETAILED DATA ANALYSIS BEFORE FILTERING ***');
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      const recordsByStaffId: Record<string, number> = {};
      const recordsByDate: Record<string, number> = {};
      const uniqueStaffIdsInRecords = new Set<string>();
      
      batchResult.records.forEach(record => {
        const staffId = record.StaffMemberLookupId?.toString() || 'Unknown';
        const dateStr = record.Date.toLocaleDateString();
        
        recordsByStaffId[staffId] = (recordsByStaffId[staffId] || 0) + 1;
        recordsByDate[dateStr] = (recordsByDate[dateStr] || 0) + 1;
        uniqueStaffIdsInRecords.add(staffId);
      });

      console.log('[useTimetableStaffRecordsData] Raw data analysis:', {
        totalRecordsFromServer: batchResult.records.length,
        uniqueStaffIdsInRecords: uniqueStaffIdsInRecords.size,
        staffIdsInRecords: Array.from(uniqueStaffIdsInRecords),
        activeStaffCount: activeStaffMembers.length,
        activeEmployeeIds: Array.from(activeEmployeeIds),
        recordsDistributionByStaff: recordsByStaffId,
        recordsDistributionByDate: Object.keys(recordsByDate).length > 10 ? 
          `${Object.keys(recordsByDate).length} unique dates` : 
          recordsByDate
      });

      // *** –ê–ù–ê–õ–ò–ó –°–û–í–ü–ê–î–ï–ù–ò–ô ***
      const matchingStaffIds = Array.from(uniqueStaffIdsInRecords).filter(id => activeEmployeeIds.has(id));
      const nonMatchingStaffIds = Array.from(uniqueStaffIdsInRecords).filter(id => !activeEmployeeIds.has(id));
      
      console.log('[useTimetableStaffRecordsData] Staff ID matching analysis:', {
        matchingStaffIds: matchingStaffIds,
        nonMatchingStaffIds: nonMatchingStaffIds.slice(0, 10), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
        matchingCount: matchingStaffIds.length,
        nonMatchingCount: nonMatchingStaffIds.length,
        potentialIssue: nonMatchingStaffIds.length > matchingStaffIds.length ? 
          'More non-matching than matching IDs - check ID format consistency' : 
          'Normal'
      });

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ –Ω–∞—à–∏–º –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
      const filteredRecords = batchResult.records.filter(record => {
        const recordStaffMemberId = record.StaffMemberLookupId?.toString();
        const shouldInclude = recordStaffMemberId && activeEmployeeIds.has(recordStaffMemberId);
        
        // –õ–æ–≥–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É–±—Ä–∞–Ω—ã –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –æ–±—ä–µ–º–∞
        
        return shouldInclude;
      });

      console.log('[useTimetableStaffRecordsData] *** CLIENT-SIDE FILTERING COMPLETED ***');
      console.log('[useTimetableStaffRecordsData] Filtering results:', {
        totalRecordsFromServer: batchResult.records.length,
        filteredRecordsForOurStaff: filteredRecords.length,
        filteringEfficiency: `${Math.round((filteredRecords.length / batchResult.records.length) * 100)}% records matched our staff`,
        activeStaffCount: activeStaffMembers.length
      });

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      if (filteredRecords.length > 0) {
        const dateRange = {
          start: Math.min(...filteredRecords.map(r => r.Date.getTime())),
          end: Math.max(...filteredRecords.map(r => r.Date.getTime()))
        };
        
        console.log(`[useTimetableStaffRecordsData] *** FILTERED RECORDS ANALYSIS ***`);
        console.log(`[useTimetableStaffRecordsData] Filtered records date range:`, {
          firstRecordDate: new Date(dateRange.start).toLocaleDateString(),
          lastRecordDate: new Date(dateRange.end).toLocaleDateString(),
          totalRecords: filteredRecords.length,
          requestedRange: `${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`
        });

        // *** –ö–†–ò–¢–ò–ß–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ –Ω–µ–¥–µ–ª—è–º ***
        const recordsByWeek: Record<number, number> = {};
        const recordsByWeekAndStaff: Record<string, Record<number, number>> = {};
        
        filteredRecords.forEach(record => {
          const recordDate = new Date(record.Date);
          const staffId = record.StaffMemberLookupId?.toString() || 'Unknown';
          
          // –ù–∞—Ö–æ–¥–∏–º –Ω–µ–¥–µ–ª—é –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏
          const matchingWeek = weeks.find(week => 
            TimetableWeekCalculator.isDateInWeek(recordDate, week.weekStart, week.weekEnd)
          );
          
          if (matchingWeek) {
            recordsByWeek[matchingWeek.weekNum] = (recordsByWeek[matchingWeek.weekNum] || 0) + 1;
            
            if (!recordsByWeekAndStaff[staffId]) {
              recordsByWeekAndStaff[staffId] = {};
            }
            recordsByWeekAndStaff[staffId][matchingWeek.weekNum] = 
              (recordsByWeekAndStaff[staffId][matchingWeek.weekNum] || 0) + 1;
          } else {
            console.warn(`[useTimetableStaffRecordsData] ‚ö†Ô∏è Record ${record.ID} (${recordDate.toLocaleDateString()}) does not match any calculated week!`);
          }
        });

        console.log('[useTimetableStaffRecordsData] *** RECORDS DISTRIBUTION BY WEEKS ***', {
          weeklyDistribution: recordsByWeek,
          totalWeeks: weeks.length,
          weeksWithData: Object.keys(recordsByWeek).length,
          avgRecordsPerWeek: Math.round(filteredRecords.length / Object.keys(recordsByWeek).length),
          potentialIssue: Object.keys(recordsByWeek).length === 1 ? 
            'WARNING: All records in single week - possible date filtering issue' : 
            'Normal distribution'
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∏ –Ω–µ–¥–µ–ª—è–º (–ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        // –õ–æ–≥–∏ –æ—Ç–ª–∞–¥–∫–∏ —É–±—Ä–∞–Ω—ã –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –æ–±—ä–µ–º–∞

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        const recordsByStaff: Record<string, number> = {};
        filteredRecords.forEach(record => {
          const key = record.StaffMemberLookupId?.toString() || 'Unknown';
          recordsByStaff[key] = (recordsByStaff[key] || 0) + 1;
        });
        
        console.log('[useTimetableStaffRecordsData] Records distribution by staff:', recordsByStaff);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        const staffWithRecords = Object.keys(recordsByStaff).length;
        const staffWithoutRecords = activeStaffMembers.filter(staff => 
          !recordsByStaff[staff.employeeId?.toString() || '']
        );

        console.log('[useTimetableStaffRecordsData] Staff coverage analysis:', {
          totalActiveStaff: activeStaffMembers.length,
          staffWithRecords: staffWithRecords,
          staffWithoutRecords: staffWithoutRecords.length,
          coveragePercentage: Math.round((staffWithRecords / activeStaffMembers.length) * 100) + '%'
        });

        if (staffWithoutRecords.length > 0) {
          console.log('[useTimetableStaffRecordsData] Staff without records:', 
            staffWithoutRecords.slice(0, 3).map(s => ({ name: s.name, employeeId: s.employeeId }))
          );
        }

        // *** –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø–∏—Å–µ–π ***
        console.log('[useTimetableStaffRecordsData] *** FILTERED RECORDS STRUCTURE ANALYSIS ***');
        if (filteredRecords.length > 0) {
          const sampleRecord = filteredRecords[0];
          console.log('[useTimetableStaffRecordsData] Sample filtered record structure:', {
            ID: sampleRecord.ID,
            Date: sampleRecord.Date,
            StaffMemberLookupId: sampleRecord.StaffMemberLookupId,
            WeeklyTimeTableID: sampleRecord.WeeklyTimeTableID,
            Title: sampleRecord.Title,
            ShiftDate1: sampleRecord.ShiftDate1,
            ShiftDate2: sampleRecord.ShiftDate2,
            allFields: Object.keys(sampleRecord)
          });
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      console.log('[useTimetableStaffRecordsData] *** SETTING FILTERED STAFF RECORDS IN STATE ***');
      console.log('[useTimetableStaffRecordsData] Setting staff records count:', filteredRecords.length);
      setStaffRecords(filteredRecords);

      // *** –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–õ–ê–î–ö–£ –ü–ï–†–ï–î –í–´–ó–û–í–û–ú –ü–†–û–¶–ï–°–°–û–†–ê ***
      console.log('[useTimetableStaffRecordsData] *** CALLING TimetableDataProcessor.processDataByWeeks ***');
      console.log('[useTimetableStaffRecordsData] Passing to processor:', {
        staffRecords: filteredRecords.length,
        staffMembers: activeStaffMembers.length,
        weeks: weeks.length,
        currentUserId: currentUserId,
        managingGroupId: managingGroupId,
        optimizationNote: 'Data loaded with single batch request + client filtering',
        firstFewRecords: filteredRecords.slice(0, 2).map(r => ({
          ID: r.ID,
          Date: r.Date?.toLocaleDateString(),
          StaffMemberLookupId: r.StaffMemberLookupId,
          WeeklyTimeTableID: r.WeeklyTimeTableID
        })),
        firstFewStaffMembers: activeStaffMembers.slice(0, 2).map(s => ({
          name: s.name,
          employeeId: s.employeeId
        }))
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä—É–ø–ø –Ω–µ–¥–µ–ª—å
      const weeksData = TimetableDataProcessor.processDataByWeeks({
        staffRecords: filteredRecords,
        staffMembers: activeStaffMembers, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        weeks: weeks,
        // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        currentUserId: currentUserId,
        managingGroupId: managingGroupId
      });

      console.log(`[useTimetableStaffRecordsData] *** PROCESSOR COMPLETED ***`);
      console.log(`[useTimetableStaffRecordsData] Processed ${weeksData.length} week groups`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–µ–¥–µ–ª—è–º
      weeksData.forEach((weekGroup: IWeekGroup) => {
        const staffWithData = weekGroup.staffRows.filter((row: ITimetableStaffRow) =>
          Object.values(row.weekData.days).some((day: IDayInfo) => day.hasData)
        ).length;
        
        console.log(`[useTimetableStaffRecordsData] Week ${weekGroup.weekInfo.weekNum}: ${staffWithData}/${weekGroup.staffRows.length} staff have data`);
      });

      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const totalStaffRows = weeksData.reduce((sum, week) => sum + week.staffRows.length, 0);
      const weeksWithData = weeksData.filter(week => week.hasData).length;
      
      console.log('[useTimetableStaffRecordsData] *** OPTIMIZATION PERFORMANCE SUMMARY ***');
      console.log('[useTimetableStaffRecordsData] Final processing summary:', {
        totalWeeks: weeksData.length,
        weeksWithData,
        totalStaffRows,
        averageStaffPerWeek: Math.round(totalStaffRows / (weeksData.length || 1)),
        totalRecordsProcessed: filteredRecords.length,
        
        // –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        optimizationResults: {
          oldApproach: `${activeStaffMembers.length} individual HTTP requests`,
          newApproach: '1 batch HTTP request + client filtering',
          networkRequestsReduced: `${activeStaffMembers.length}x fewer requests`,
          estimatedTimeImprovement: `${Math.round(loadTime)}ms for all data vs ~${Math.round(loadTime * activeStaffMembers.length)}ms for individual requests`,
          dataEfficiency: `${Math.round((filteredRecords.length / batchResult.records.length) * 100)}% of server data was relevant`
        }
      });

      console.log('[useTimetableStaffRecordsData] *** SETTING OPTIMIZED WEEKS DATA IN STATE ***');
      setWeeksData(weeksData);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏
      if (filteredRecords.length === 0 && activeStaffMembers.length > 0) {
        console.warn('[useTimetableStaffRecordsData] Warning: No records found for any active staff members');
        setErrorStaffRecords('No schedule records found for active staff members in selected period');
      }

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error('[useTimetableStaffRecordsData] *** CRITICAL ERROR in optimized batch loading ***:', error);
      setErrorStaffRecords(`Failed to load timetable data: ${errorMessage}`);
      setStaffRecords([]);
      setWeeksData([]);
    } finally {
      console.log('[useTimetableStaffRecordsData] *** SETTING LOADING STATE TO FALSE ***');
      setIsLoadingStaffRecords(false);
      
      // *** –°–ë–†–ê–°–´–í–ê–ï–ú –§–õ–ê–ì –ó–ê–ì–†–£–ó–ö–ò ***
      isLoadingRef.current = false;
    }
  }, [
    context,
    staffRecordsService,
    selectedDate,
    currentUserId,
    managingGroupId,
    weeks,
    staffMembers,
    setStaffRecords,
    setWeeksData,
    setIsLoadingStaffRecords,
    setErrorStaffRecords
  ]);

  const refreshTimetableData = useCallback(async (): Promise<void> => {
    console.log('[useTimetableStaffRecordsData] Refreshing timetable data with optimized batch loading');
    await loadTimetableData();
  }, [loadTimetableData]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  useEffect(() => {
    console.log('[useTimetableStaffRecordsData] *** useEffect TRIGGERED FOR OPTIMIZED LOADING ***');
    console.log('[useTimetableStaffRecordsData] Dependencies:', {
      hasContext: !!context,
      hasStaffRecordsService: !!staffRecordsService,
      hasManagingGroupId: !!managingGroupId,
      hasCurrentUserId: !!currentUserId,
      weeksCount: weeks.length,
      staffMembersCount: staffMembers.length,
      selectedDate: selectedDate.toISOString(),
      optimizationNote: 'Will use single batch request instead of individual requests'
    });
    
    // *** –ó–ê–©–ò–¢–ê –û–¢ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ó–ê–ü–†–û–°–û–í ***
    const hasAllRequiredDeps = context && 
      staffRecordsService && 
      managingGroupId && 
      currentUserId &&
      weeks.length > 0 &&
      staffMembers.length > 0;

    if (!hasAllRequiredDeps) {
      console.log('[useTimetableStaffRecordsData] *** CLEARING DATA - missing dependencies ***');
      console.log('[useTimetableStaffRecordsData] Missing dependencies analysis:', {
        hasContext: !!context,
        hasStaffRecordsService: !!staffRecordsService,
        hasManagingGroupId: !!managingGroupId,
        hasCurrentUserId: !!currentUserId,
        weeksCount: weeks.length,
        staffMembersCount: staffMembers.length
      });
      
      setStaffRecords([]);
      setWeeksData([]);
      setIsLoadingStaffRecords(false);
      setErrorStaffRecords(undefined);
      return;
    }

    // *** DEBOUNCE: –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤ ***
    console.log('[useTimetableStaffRecordsData] *** SETTING UP DEBOUNCED REQUEST ***');
    
    const timeoutId = setTimeout(() => {
      console.log('[useTimetableStaffRecordsData] *** DEBOUNCED REQUEST EXECUTING ***');
      console.log('[useTimetableStaffRecordsData] *** CALLING OPTIMIZED loadTimetableData from useEffect ***');
      
      loadTimetableData().catch(error => {
        console.error('[useTimetableStaffRecordsData] Error in useEffect optimized loadTimetableData:', error);
      });
    }, 300); // 300ms –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π

    // Cleanup —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    return () => {
      console.log('[useTimetableStaffRecordsData] *** CLEANUP: Cancelling previous debounced request ***');
      clearTimeout(timeoutId);
    };
  }, [
    selectedDate.toISOString(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    weeks.length,
    staffMembers.length,
    managingGroupId,
    currentUserId,
    // –ù–ï –≤–∫–ª—é—á–∞–µ–º loadTimetableData –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ä–µ—Ä–µ–Ω–¥–µ—Ä—ã
  ]);

  return {
    loadTimetableData,
    refreshTimetableData
  };
};