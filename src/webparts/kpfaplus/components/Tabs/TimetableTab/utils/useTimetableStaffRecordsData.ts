// src/webparts/kpfaplus/components/Tabs/TimetableTab/utils/useTimetableStaffRecordsData.ts

import { useEffect, useCallback, useRef } from 'react';
import { WebPartContext } from '@microsoft/sp-webpart-base';
import { StaffRecordsService, IStaffRecord } from '../../../../services/StaffRecordsService';
import { 
 IWeekInfo, 
 IWeekGroup,
 IStaffMember
} from '../interfaces/TimetableInterfaces';
import { processAndSetResults } from './useTimetableStaffRecordsDataHelpers';

interface UseTimetableStaffRecordsDataProps {
 context?: WebPartContext;
 selectedDate: Date;
 currentUserId?: string;
 managingGroupId?: string;
 staffRecordsService?: StaffRecordsService;
 weeks: IWeekInfo[];
 staffMembers: IStaffMember[];
 setWeeksData: (weeksData: IWeekGroup[]) => void;
 setStaffRecords: (records: IStaffRecord[]) => void;
 setIsLoadingStaffRecords: (isLoading: boolean) => void;
 setErrorStaffRecords: (error?: string) => void;
}

interface UseTimetableStaffRecordsDataReturn {
 loadTimetableData: (overrideDate?: Date) => Promise<void>;
 refreshTimetableData: () => Promise<void>;
}

export const useTimetableStaffRecordsData = (
 props: UseTimetableStaffRecordsDataProps
): UseTimetableStaffRecordsDataReturn => {
 const {
   context,
   selectedDate,
   currentUserId,
   managingGroupId,
   staffRecordsService,
   weeks,
   staffMembers,
   setWeeksData,
   setStaffRecords,
   setIsLoadingStaffRecords,
   setErrorStaffRecords
 } = props;

 // *** –ó–ê–©–ò–¢–ê –û–¢ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–• –ó–ê–ü–†–û–°–û–í ***
 const isLoadingRef = useRef(false);
 const lastRequestParamsRef = useRef<string>('');

 console.log('[useTimetableStaffRecordsData] Hook initialized with UPDATED TIMETABLE STRATEGY:', {
   hasContext: !!context,
   hasStaffRecordsService: !!staffRecordsService,
   weeksCount: weeks.length,
   staffMembersCount: staffMembers.length,
   selectedDate: selectedDate.toISOString(),
   managingGroupId,
   currentUserId,
   updatedStrategy: 'Using getAllActiveStaffRecordsForTimetable - loads ALL active records without pagination (excludes Deleted=1)'
 });

 /**
  * *** –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø TIMETABLE: –ó–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• –ê–ö–¢–ò–í–ù–´–• –¥–∞–Ω–Ω—ã—Ö –ë–ï–ó –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ***
  * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ getAllActiveStaffRecordsForTimetable —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º Deleted=1
  */
 const loadWithTimetableStrategy = async (
   startDate: Date, 
   endDate: Date, 
   currentUserId: string, 
   managingGroupId: string, 
   staffRecordsService: StaffRecordsService
 ): Promise<IStaffRecord[]> => {
   console.log('[useTimetableStaffRecordsData] *** EXECUTING UPDATED TIMETABLE STRATEGY ***');
   console.log('[useTimetableStaffRecordsData] *** LOADING ALL ACTIVE DATA WITHOUT PAGINATION (EXCLUDING DELETED=1) ***');
   
   const queryParams = {
     startDate,
     endDate,
     currentUserID: currentUserId,
     staffGroupID: managingGroupId,
     employeeID: '', // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ = –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
     timeTableID: undefined
     // –ù–ï–¢ skip, top, nextLink - –∑–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ
     // –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–∞–µ–º Deleted=1 –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º —É—Ä–æ–≤–Ω–µ
   };

   console.log('[useTimetableStaffRecordsData] Timetable query params (NO PAGINATION + NO DELETED):', queryParams);

   const startTime = performance.now();
   
   // *** –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –ú–ï–¢–û–î –° –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï–ú DELETED=1 ***
   const result = await staffRecordsService.getAllActiveStaffRecordsForTimetable(queryParams);
   
   const loadTime = performance.now() - startTime;

   console.log('[useTimetableStaffRecordsData] *** UPDATED TIMETABLE STRATEGY RESULT ***:', {
     recordsCount: result.records.length,
     totalCount: result.totalCount,
     loadTimeMs: Math.round(loadTime),
     hasError: !!result.error,
     isDataComplete: result.records.length === result.totalCount,
     strategyUsed: 'getAllActiveStaffRecordsForTimetable (NO PAGINATION + NO DELETED)',
     expectedResult: 'ALL active records for the period loaded at once (Deleted=1 excluded)',
     improvement: 'Server-side filtering eliminates deleted records, improving performance'
   });

   if (result.error) {
     throw new Error(`Updated Timetable strategy failed: ${result.error}`);
   }

   // *** –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ***
   if (result.records.length !== result.totalCount) {
     console.warn('[useTimetableStaffRecordsData] ‚ö†Ô∏è POTENTIAL DATA LOSS:', {
       recordsReceived: result.records.length,
       totalExpected: result.totalCount,
       difference: result.totalCount - result.records.length
     });
   } else {
     console.log('[useTimetableStaffRecordsData] ‚úÖ SUCCESS: Got ALL expected ACTIVE records (deleted records excluded at server level)');
   }

   return result.records;
 };

 const loadTimetableData = useCallback(async (overrideDate?: Date): Promise<void> => {
   const dateToUse = overrideDate || selectedDate;
   
   // *** –°–û–ó–î–ê–ï–ú –£–ù–ò–ö–ê–õ–¨–ù–´–ô –ö–õ–Æ–ß –ó–ê–ü–†–û–°–ê –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –î–£–ë–õ–ò–ö–ê–¢–û–í ***
   const requestKey = `${dateToUse.toISOString()}-${managingGroupId}-${currentUserId}-${staffMembers.length}-${weeks.length}`;
   
   console.log('[useTimetableStaffRecordsData] *** UPDATED TIMETABLE STRATEGY loadTimetableData CALLED ***');
   console.log('[useTimetableStaffRecordsData] Request key:', requestKey);
   console.log('[useTimetableStaffRecordsData] Last request key:', lastRequestParamsRef.current);
   console.log('[useTimetableStaffRecordsData] Is currently loading:', isLoadingRef.current);
   
   // *** –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–£–Æ–©–ò–• –ó–ê–ü–†–û–°–û–í ***
   if (isLoadingRef.current) {
     console.log('[useTimetableStaffRecordsData] üõë SKIPPING: Request already in progress');
     return;
   }
   
   if (lastRequestParamsRef.current === requestKey) {
     console.log('[useTimetableStaffRecordsData] üõë SKIPPING: Same request parameters as last time');
     return;
   }
   
   // *** –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï RACE CONDITION: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ ***
   let shouldProceed = false;
   
   // –ê—Ç–æ–º–∞—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   if (!isLoadingRef.current) {
     isLoadingRef.current = true;
     lastRequestParamsRef.current = requestKey;
     shouldProceed = true;
   }
   
   if (!shouldProceed) {
     console.log('[useTimetableStaffRecordsData] üõë SKIPPING: Already loading (atomic check)');
     return;
   }
   
   console.log('[useTimetableStaffRecordsData] ‚úÖ PROCEEDING: New unique request with UPDATED TIMETABLE STRATEGY');

   if (!context || !staffRecordsService) {
     console.log('[useTimetableStaffRecordsData] Cannot load records: missing context or service');
     setStaffRecords([]);
     setWeeksData([]);
     setIsLoadingStaffRecords(false);
     setErrorStaffRecords('Service not available.');
     isLoadingRef.current = false;
     return;
   }

   if (!managingGroupId || !currentUserId) {
     console.log('[useTimetableStaffRecordsData] Cannot load records: missing managingGroupId or currentUserId');
     setStaffRecords([]);
     setWeeksData([]);
     setIsLoadingStaffRecords(false);
     setErrorStaffRecords('Group ID or User ID not available.');
     isLoadingRef.current = false;
     return;
   }

   if (weeks.length === 0) {
     console.log('[useTimetableStaffRecordsData] Cannot load records: no weeks calculated');
     setStaffRecords([]);
     setWeeksData([]);
     setIsLoadingStaffRecords(false);
     isLoadingRef.current = false;
     return;
   }

   if (staffMembers.length === 0) {
     console.log('[useTimetableStaffRecordsData] No staff members in group');
     setStaffRecords([]);
     setWeeksData([]);
     setIsLoadingStaffRecords(false);
     isLoadingRef.current = false;
     return;
   }

   try {
     setIsLoadingStaffRecords(true);
     setErrorStaffRecords(undefined);

     // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
     const startDate = new Date(dateToUse.getFullYear(), dateToUse.getMonth(), 1);
     const endDate = new Date(dateToUse.getFullYear(), dateToUse.getMonth() + 1, 0);

     console.log('[useTimetableStaffRecordsData] Loading data for date range with UPDATED STRATEGY:', {
       startDate: startDate.toISOString(),
       endDate: endDate.toISOString(),
       totalDays: Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1,
       strategy: 'UPDATED TIMETABLE STRATEGY - loads ALL active records without pagination (excludes Deleted=1)'
     });

     // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö)
     const activeStaffMembers = staffMembers.filter(staffMember => {
       const isDeleted = staffMember.deleted === 1;
       const hasEmployeeId = staffMember.employeeId && staffMember.employeeId !== '0';
       
       if (isDeleted) {
         console.log(`[useTimetableStaffRecordsData] Excluding deleted staff: ${staffMember.name}`);
         return false;
       }
       
       if (!hasEmployeeId) {
         console.log(`[useTimetableStaffRecordsData] Excluding staff without employeeId: ${staffMember.name}`);
         return false;
       }
       
       return true;
     });

     console.log(`[useTimetableStaffRecordsData] Active staff members with employeeId: ${activeStaffMembers.length}/${staffMembers.length}`);

     if (activeStaffMembers.length === 0) {
       console.log('[useTimetableStaffRecordsData] No active staff members with employeeId found');
       setStaffRecords([]);
       setWeeksData([]);
       setIsLoadingStaffRecords(false);
       isLoadingRef.current = false;
       return;
     }

     // *** –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Timetable Strategy –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –í–°–ï–• –ê–ö–¢–ò–í–ù–´–• –¥–∞–Ω–Ω—ã—Ö ***
     const loadingStrategy = 'UPDATED_TIMETABLE_STRATEGY';

     console.log('[useTimetableStaffRecordsData] *** LOADING STRATEGY SELECTION ***', {
       staffCount: activeStaffMembers.length,
       selectedStrategy: loadingStrategy,
       reasoning: `Using UPDATED Timetable Strategy - loads ALL active records at once without pagination and excludes Deleted=1`,
       expectedBenefit: `Should load all active records and distribute across all ${weeks.length} weeks, with better performance due to server-side filtering`,
       previousProblem: 'Old strategy concentrated data in first week only and included deleted records',
       solution: 'New getAllActiveStaffRecordsForTimetable method bypasses pagination and filters deleted records on server'
     });

     let allRecords: IStaffRecord[] = [];

     // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é Timetable —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
     allRecords = await loadWithTimetableStrategy(startDate, endDate, currentUserId, managingGroupId, staffRecordsService);

     console.log('[useTimetableStaffRecordsData] *** UPDATED TIMETABLE STRATEGY EXECUTION COMPLETED ***', {
       recordsLoaded: allRecords.length,
       expectedRecords: 'All active records for the period',
       loadingMethod: 'getAllActiveStaffRecordsForTimetable (bypasses pagination + excludes Deleted=1)',
       nextStep: 'Processing and distributing across weeks'
     });

     // –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π - –í–´–ù–ï–°–ï–ù–û –í –û–¢–î–ï–õ–¨–ù–´–ô –§–ê–ô–õ
     await processAndSetResults(
       allRecords, 
       activeStaffMembers, 
       weeks, 
       loadingStrategy,
       selectedDate,
       setStaffRecords,
       setWeeksData
     );

   } catch (error) {
     const errorMessage = error instanceof Error ? error.message : String(error);
     console.error('[useTimetableStaffRecordsData] *** CRITICAL ERROR in UPDATED TIMETABLE STRATEGY ***:', error);
     setErrorStaffRecords(`Failed to load timetable data: ${errorMessage}`);
     setStaffRecords([]);
     setWeeksData([]);
   } finally {
     console.log('[useTimetableStaffRecordsData] *** SETTING LOADING STATE TO FALSE ***');
     setIsLoadingStaffRecords(false);
     
     // *** –ë–ï–ó–û–ü–ê–°–ù–´–ô –°–ë–†–û–° –§–õ–ê–ì–ê –ó–ê–ì–†–£–ó–ö–ò ***
     setTimeout(() => {
       isLoadingRef.current = false;
     }, 0);
   }
 }, [
   context,
   staffRecordsService,
   selectedDate,
   currentUserId,
   managingGroupId,
   weeks,
   staffMembers,
   setStaffRecords,
   setWeeksData,
   setIsLoadingStaffRecords,
   setErrorStaffRecords
 ]);

 const refreshTimetableData = useCallback(async (): Promise<void> => {
   console.log('[useTimetableStaffRecordsData] Refreshing timetable data with UPDATED TIMETABLE STRATEGY');
   await loadTimetableData();
 }, [loadTimetableData]);

 // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 useEffect(() => {
   console.log('[useTimetableStaffRecordsData] *** useEffect TRIGGERED FOR UPDATED TIMETABLE STRATEGY ***');
   console.log('[useTimetableStaffRecordsData] Dependencies:', {
     hasContext: !!context,
     hasStaffRecordsService: !!staffRecordsService,
     hasManagingGroupId: !!managingGroupId,
     hasCurrentUserId: !!currentUserId,
     weeksCount: weeks.length,
     staffMembersCount: staffMembers.length,
     selectedDate: selectedDate.toISOString(),
     solution: 'UPDATED TIMETABLE STRATEGY with getAllActiveStaffRecordsForTimetable - should fix week distribution and exclude deleted records'
   });
   
   // *** –ó–ê–©–ò–¢–ê –û–¢ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ó–ê–ü–†–û–°–û–í ***
   const hasAllRequiredDeps = context && 
     staffRecordsService && 
     managingGroupId && 
     currentUserId &&
     weeks.length > 0 &&
     staffMembers.length > 0;

   if (!hasAllRequiredDeps) {
     console.log('[useTimetableStaffRecordsData] *** CLEARING DATA - missing dependencies ***');
     console.log('[useTimetableStaffRecordsData] Missing dependencies analysis:', {
       hasContext: !!context,
       hasStaffRecordsService: !!staffRecordsService,
       hasManagingGroupId: !!managingGroupId,
       hasCurrentUserId: !!currentUserId,
       weeksCount: weeks.length,
       staffMembersCount: staffMembers.length
     });
     
     setStaffRecords([]);
     setWeeksData([]);
     setIsLoadingStaffRecords(false);
     setErrorStaffRecords(undefined);
     return;
   }

   // *** DEBOUNCE: –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤ ***
   console.log('[useTimetableStaffRecordsData] *** SETTING UP DEBOUNCED UPDATED TIMETABLE STRATEGY REQUEST ***');
   
   const timeoutId = setTimeout(() => {
     console.log('[useTimetableStaffRecordsData] *** DEBOUNCED UPDATED TIMETABLE STRATEGY REQUEST EXECUTING ***');
     console.log('[useTimetableStaffRecordsData] *** CALLING UPDATED TIMETABLE STRATEGY loadTimetableData from useEffect ***');
     
     loadTimetableData().catch(error => {
       console.error('[useTimetableStaffRecordsData] Error in useEffect UPDATED TIMETABLE STRATEGY loadTimetableData:', error);
     });
   }, 300); // 300ms –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π

   // Cleanup —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   return () => {
     console.log('[useTimetableStaffRecordsData] *** CLEANUP: Cancelling previous debounced UPDATED TIMETABLE STRATEGY request ***');
     clearTimeout(timeoutId);
   };
 }, [
   selectedDate.toISOString(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
   weeks.length,
   staffMembers.length,
   managingGroupId,
   currentUserId,
   // –ù–ï –≤–∫–ª—é—á–∞–µ–º loadTimetableData –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å - —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ä–µ—Ä–µ–Ω–¥–µ—Ä—ã
 ]);

 return {
   loadTimetableData,
   refreshTimetableData
 };
};