// src/webparts/kpfaplus/components/Tabs/SRSTab/utils/SRSTabInterfaces.ts

import { IDropdownOption } from '@fluentui/react';

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ SRS
 * –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ Holiday –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
 */
export interface ISRSRecord {
  id: string;
  date: Date;
  dayOfWeek: string;
  hours: string; // –†–∞–±–æ—á–∏–µ —á–∞—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "7.50"
  relief: boolean; // Relief checkbox
  startWork: {
    hours: string; // "08"
    minutes: string; // "00"
  };
  finishWork: {
    hours: string; // "16"
    minutes: string; // "00"
  };
  lunch: string; // –í—Ä–µ–º—è –æ–±–µ–¥–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö "30"
  typeOfLeave: string; // –¢–∏–ø –æ—Ç–ø—É—Å–∫–∞
  timeLeave: string; // –í—Ä–µ–º—è –æ—Ç–ø—É—Å–∫–∞ –≤ —á–∞—Å–∞—Ö "7.50"
  shift: number; // –ù–æ–º–µ—Ä —Å–º–µ–Ω—ã
  contract: string; // –ù–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ "1", "2", "3"
  contractCheck: boolean; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  status: 'positive' | 'negative' | 'none'; // –°—Ç–∞—Ç—É—Å (üëç/üëé)
  srs: boolean; // –û—Ç–º–µ—Ç–∫–∞ SRS
  checked: boolean; // –î–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  deleted?: boolean; // –î–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
  // *** –ù–û–í–û–ï: –ü–æ–ª–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ ***
  Holiday?: number; // –ü—Ä–∏–∑–Ω–∞–∫ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞: 1 = –ø—Ä–∞–∑–¥–Ω–∏–∫, 0 = —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (–∫–∞–∫ –≤ StaffRecords)
}

/**
 * –û–ø—Ü–∏–∏ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –≤ SRS —Ç–∞–±–ª–∏—Ü–µ
 * –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤
 */
export interface ISRSTableOptions {
  hours: IDropdownOption[]; // 00-23
  minutes: IDropdownOption[]; // 00, 05, 10, ..., 55
  lunchTimes: IDropdownOption[]; // 0, 5, 10, ..., 30
  leaveTypes: IDropdownOption[]; // *** –û–ë–ù–û–í–õ–ï–ù–û: –¢–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ ***
  contractNumbers: IDropdownOption[]; // 1, 2, 3
}

/**
 * –ü—Ä–æ–ø—Å—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ SRSFilterControls
 */
export interface ISRSFilterControlsProps {
  fromDate: Date;
  toDate: Date;
  totalHours: string;
  isLoading: boolean;
  onFromDateChange: (date: Date | undefined) => void;
  onToDateChange: (date: Date | undefined) => void;
  onRefresh: () => void;
  onExportAll: () => void;
  onSave: () => void;
  onSaveChecked: () => void;
  hasChanges: boolean; // –ï—Å—Ç—å –ª–∏ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  hasCheckedItems: boolean; // –ï—Å—Ç—å –ª–∏ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
}

/**
 * –ü—Ä–æ–ø—Å—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ SRSTable
 * –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤
 */
export interface ISRSTableProps {
  items: ISRSRecord[];
  options: ISRSTableOptions;
  isLoading: boolean;
  onItemChange: (item: ISRSRecord, field: string, value: string | boolean | { hours: string; minutes: string }) => void;
  onLunchTimeChange: (item: ISRSRecord, value: string) => void;
  onContractNumberChange: (item: ISRSRecord, value: string) => void;
  // *** –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –æ—Ç–ø—É—Å–∫–∞ ***
  onTypeOfLeaveChange?: (item: ISRSRecord, value: string) => void;
}

/**
 * –ü—Ä–æ–ø—Å—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ SRSTableRow
 * –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤
 */
export interface ISRSTableRowProps {
  item: ISRSRecord;
  options: ISRSTableOptions;
  isEven: boolean; // –î–ª—è —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ —Å—Ç—Ä–æ–∫
  onItemChange: (item: ISRSRecord, field: string, value: string | boolean | { hours: string; minutes: string }) => void;
  // *** –ù–û–í–û–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ***
  onTypeOfLeaveChange?: (item: ISRSRecord, value: string) => void;
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ SRS –≤–∫–ª–∞–¥–∫–∏ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
 * –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤
 */
export interface ISRSTabState {
  fromDate: Date;
  toDate: Date;
  srsData: ISRSRecord[];
  totalHours: string;
  isLoading: boolean;
  error?: string;
  hasUnsavedChanges: boolean;
  selectedItems: Set<string>; // ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
  // *** –ù–û–í–û–ï: –¢–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤ ***
  typesOfLeave: Array<{ id: string; title: string; color?: string }>; // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–∏–ø–æ–≤ –æ—Ç–ø—É—Å–∫–æ–≤
  isLoadingTypesOfLeave: boolean;
}

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å SRS –¥–∞–Ω–Ω—ã–º–∏ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
 */
export interface ISRSOperationParams {
  fromDate: Date;
  toDate: Date;
  staffId: string;
  managerId?: string;
  staffGroupId?: string;
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ SRS
 */
export interface ISRSExportResult {
  success: boolean;
  fileName?: string;
  error?: string;
  recordsCount?: number;
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è SRS
 */
export interface ISRSSaveResult {
  success: boolean;
  savedCount: number;
  failedCount: number;
  errors?: string[];
}

/**
 * *** –ù–û–í–´–ï –ò–ù–¢–ï–†–§–ï–ô–°–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –¢–ò–ü–ê–ú–ò –û–¢–ü–£–°–ö–û–í ***
 */

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–∏–ø–æ–≤ –æ—Ç–ø—É—Å–∫–æ–≤ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
 */
export interface ISRSTypeOfLeave {
  id: string;
  title: string;
  color?: string;
}

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—Å—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ SRS Tab
 * –û–ë–ù–û–í–õ–ï–ù–û: –í–∫–ª—é—á–∞–µ—Ç —Ç–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
 */
export interface ISRSTabProps {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–ø—Å—ã
  selectedStaff?: { id: string; name: string; employeeId: string };
  context?: any;
  currentUserId?: string;
  managingGroupId?: string;
  
  // –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  fromDate: Date;
  toDate: Date;
  srsRecords: ISRSRecord[];
  totalHours: string;
  
  // –¢–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤
  typesOfLeave: ISRSTypeOfLeave[];
  isLoadingTypesOfLeave: boolean;
  
  // *** –ù–û–í–û–ï: –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ ***
  holidays: Array<{ id: string; title: string; date: Date }>; // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
  isLoadingHolidays: boolean;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  isLoading: boolean;
  isLoadingSRS: boolean;
  
  // –û—à–∏–±–∫–∏
  error?: string;
  errorSRS?: string;
  
  // –ò–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤—ã–±–æ—Ä
  hasUnsavedChanges: boolean;
  selectedItems: Set<string>;
  hasCheckedItems: boolean;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  onFromDateChange: (date: Date | undefined) => void;
  onToDateChange: (date: Date | undefined) => void;
  onRefreshData: () => void;
  onExportAll: () => void;
  onSave: () => void;
  onSaveChecked: () => void;
  onItemChange: (item: ISRSRecord, field: string, value: string | boolean | { hours: string; minutes: string }) => void;
  onLunchTimeChange: (item: ISRSRecord, value: string) => void;
  onContractNumberChange: (item: ISRSRecord, value: string) => void;
  onTypeOfLeaveChange: (item: ISRSRecord, value: string) => void;
  
  // *** –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ ***
  loadHolidays: () => void;
}

/**
 * *** –ù–û–í–û–ï: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø—Ü–∏–π SRS —Ç–∞–±–ª–∏—Ü—ã ***
 * –§—É–Ω–∫—Ü–∏—è-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ü–∏–π —Å —Ç–∏–ø–∞–º–∏ –æ—Ç–ø—É—Å–∫–æ–≤
 */
export interface ISRSTableOptionsConfig {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è SRS —Ç–∞–±–ª–∏—Ü—ã –≤–∫–ª—é—á–∞—è —Ç–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤
   */
  createSRSTableOptions: (typesOfLeave: ISRSTypeOfLeave[]) => ISRSTableOptions;
}

/**
 * *** –ù–û–í–û–ï: –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–ø–∞–º–∏ –æ—Ç–ø—É—Å–∫–æ–≤ –≤ SRS ***
 */
export class SRSTableOptionsHelper {
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è SRS —Ç–∞–±–ª–∏—Ü—ã
   */
  public static createStandardOptions(): Omit<ISRSTableOptions, 'leaveTypes'> {
    return {
      hours: Array.from({ length: 24 }, (_, i) => ({
        key: i.toString().padStart(2, '0'),
        text: i.toString().padStart(2, '0')
      })),
      minutes: Array.from({ length: 12 }, (_, i) => {
        const value = (i * 5).toString().padStart(2, '0');
        return { key: value, text: value };
      }),
      lunchTimes: Array.from({ length: 13 }, (_, i) => {
        const value = (i * 5).toString();
        return { key: value, text: value };
      }),
      contractNumbers: [
        { key: '1', text: '1' },
        { key: '2', text: '2' },
        { key: '3', text: '3' }
      ]
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–æ–≤ –æ—Ç–ø—É—Å–∫–æ–≤
   */
  public static createLeaveTypesOptions(typesOfLeave: ISRSTypeOfLeave[]): IDropdownOption[] {
    const options: IDropdownOption[] = [
      { key: '', text: 'None' } // –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - "–ù–µ—Ç —Ç–∏–ø–∞ –æ—Ç–ø—É—Å–∫–∞"
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
    typesOfLeave.forEach(type => {
      options.push({
        key: type.id,
        text: type.title,
        data: { color: type.color } // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      });
    });

    return options;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è SRS —Ç–∞–±–ª–∏—Ü—ã
   */
  public static createFullSRSTableOptions(typesOfLeave: ISRSTypeOfLeave[]): ISRSTableOptions {
    const standardOptions = SRSTableOptionsHelper.createStandardOptions();
    const leaveTypesOptions = SRSTableOptionsHelper.createLeaveTypesOptions(typesOfLeave);

    return {
      ...standardOptions,
      leaveTypes: leaveTypesOptions
    };
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Ç–∏–ø –æ—Ç–ø—É—Å–∫–∞ –ø–æ ID
   */
  public static findLeaveTypeById(typesOfLeave: ISRSTypeOfLeave[], id: string): ISRSTypeOfLeave | undefined {
    return typesOfLeave.find(type => type.id === id);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–ø—É—Å–∫–∞ –ø–æ ID
   */
  public static getLeaveTypeTitle(typesOfLeave: ISRSTypeOfLeave[], id: string): string {
    const leaveType = SRSTableOptionsHelper.findLeaveTypeById(typesOfLeave, id);
    return leaveType ? leaveType.title : 'Unknown';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç —Ç–∏–ø–∞ –æ—Ç–ø—É—Å–∫–∞ –ø–æ ID
   */
  public static getLeaveTypeColor(typesOfLeave: ISRSTypeOfLeave[], id: string): string | undefined {
    const leaveType = SRSTableOptionsHelper.findLeaveTypeById(typesOfLeave, id);
    return leaveType?.color;
  }
}